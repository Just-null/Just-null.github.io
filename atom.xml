<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Just</title>
  <icon>https://www.gravatar.com/avatar/cfdf85d8910bd2c11272af899aa439e3</icon>
  
  <link href="https://blog.just-null.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.just-null.cn/"/>
  <updated>2021-09-01T01:11:23.000Z</updated>
  <id>https://blog.just-null.cn/</id>
  
  <author>
    <name>Just</name>
    <email>3040705657@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>今日校园信息自动提交（适配昆明学院）</title>
    <link href="https://blog.just-null.cn/posts/todaystudy.html"/>
    <id>https://blog.just-null.cn/posts/todaystudy.html</id>
    <published>2021-09-01T01:06:40.000Z</published>
    <updated>2021-09-01T01:11:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><div class="note info no-icon flat"><p>本项目基于<a href="https://github.com/thriving123/fuckTodayStudy">thriving123</a>的项目进行构建，针对昆明学院今日校园的特点进行适配，在此基础上对代码做了部分修改，添加了RSA加密算法（适用于昆明学院）密码的加密，消息通知采用<a href="https://sct.ftqq.com/">Server酱</a>,严禁用于收费相关业务</p><p>项目借助于腾讯云的<code>云函数</code>或者阿里云的<code>函数计算</code>亦或者<code>自己服务器/电脑</code>运行</p><p>请在使用本项目之前确保您拥有以上三个环境之一。</p></div><h1 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h1><p>你可以从<a href="https://github.com/Just-null/TodayStudy">Github仓库</a>中将项目克隆到你的本地对<code>config.yml文件</code>和<code>login目录下的system.yml文件</code>进行修改，或者使用我提供的压缩包<a href="https://wwa.lanzoui.com/iKi9Utgjwqh">点击前往</a>上传到腾讯云函数后手动修改<code>config.yml文件</code>和和<code>login目录下的system.yml文件</code></p><font color="red">如果只想使用，建议直接下载我提供的压缩包！！！，如果想了解源码，则可以克隆下来，并使用 <b>pip3 install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple </b>安装所需环境</font><h2 id="config-yml文件修改"><a href="#config-yml文件修改" class="headerlink" title="config.yml文件修改"></a>config.yml文件修改</h2><font color="red">如果是下载压缩包的方式，可以将压缩包解压之后修改，也可以在创建云函数之后在线修改</font><p>默认的文件内容如下</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 特别提示：调试完成后请记得将debug改为false</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用户组配置</span></span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"><span class="comment"># 温馨提示：请仔细注意每个模板是属于哪个任务类型的配置！##</span></span><br><span class="line"><span class="comment">##################################################</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line">  <span class="comment"># 第一个用户配置</span></span><br><span class="line">  <span class="comment"># 以下配置为工作日志</span></span><br><span class="line">  <span class="comment"># 这里默认仅适配宜宾学院，其他学校自行修改</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">user:</span></span><br><span class="line">      <span class="comment"># 任务类型（收集：0、签到：1、查寝：2、教师工作日志：3）</span></span><br><span class="line">      <span class="attr">type:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment">#school 学校全称</span></span><br><span class="line">      <span class="attr">schoolName:</span> <span class="string">昆明学院</span></span><br><span class="line">      <span class="comment">#username 学号或者工号</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="comment">#password 密码</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="comment"># 地址信息</span></span><br><span class="line">      <span class="attr">address:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="comment">#sendKey server酱key</span></span><br><span class="line">      <span class="attr">sendKey:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="comment"># 附上经纬度查询地址（请自行选择自己的学校地址，address，lon，lat都要填查询到的）：http://api.map.baidu.com/lbsapi/getpoint/index.html</span></span><br><span class="line">      <span class="comment">#lon 经度</span></span><br><span class="line">      <span class="attr">lon:</span> </span><br><span class="line">      <span class="comment">#lat 纬度</span></span><br><span class="line">      <span class="attr">lat:</span> </span><br><span class="line">      <span class="attr">checkTitle:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 表单信息</span></span><br><span class="line">      <span class="attr">forms:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">form:</span></span><br><span class="line">            <span class="attr">title:</span> <span class="string">今天你的所在地是？</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">xx省/xx市/xx区</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">form:</span></span><br><span class="line">            <span class="attr">title:</span> <span class="string">今天你的体温是多少？</span></span><br><span class="line">            <span class="attr">value:</span> <span class="number">37.2</span><span class="string">℃及以下</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">form:</span></span><br><span class="line">            <span class="attr">title:</span> <span class="string">今天你的身体状况是？</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">健康</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">form:</span></span><br><span class="line">            <span class="attr">title:</span> <span class="string">近14天你或你的共同居住人是否有疫情中、高风险区域人员接触史？</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">form:</span></span><br><span class="line">            <span class="attr">title:</span> <span class="string">近14天你或你的共同居住人是否和确诊、疑似病人接触过？</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">form:</span></span><br><span class="line">            <span class="attr">title:</span> <span class="string">近14天你或你的共同居住人是否是确诊、疑似病例？</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">form:</span></span><br><span class="line">            <span class="attr">title:</span> <span class="string">你或你的共同居住人目前是否被医学隔离？</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">否</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">form:</span></span><br><span class="line">            <span class="attr">title:</span> <span class="string">今天你当地的健康码颜色是？</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">绿色</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">form:</span></span><br><span class="line">            <span class="attr">title:</span> <span class="string">本人是否承诺以上所填报的全部内容均属实、准确，不存在任何隐瞒与不实的情况，更无遗漏之处</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">是</span></span><br></pre></td></tr></table></figure><h3 id="username和password字段说明"><a href="#username和password字段说明" class="headerlink" title="username和password字段说明"></a>username和password字段说明</h3><p>对于<code>username</code>和<code>password</code>这两个字断代表账号和密码（即学校教务系统的账号和密码），填写在对应位置即可</p><h3 id="address、lon、lat字段说明"><a href="#address、lon、lat字段说明" class="headerlink" title="address、lon、lat字段说明"></a>address、lon、lat字段说明</h3><p>address则是你上报信息时候显示的地址，你可以通过  <a href="http://api.map.baidu.com/lbsapi/getpoint/index.html">http://api.map.baidu.com/lbsapi/getpoint/index.html</a>   这个api获得你所需填报地址的经纬度</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901161238927.png" alt="address"></p><p>得到的信息如下：地址为<code>云南省昆明市五华区普吉路</code>,如果选择使用右侧显示的第一个地址，则获得如下坐标：<code>102.680877,25.076813</code>,其中<code>102.680877</code>代表经度，<code>25.076813</code>代表纬度</p><p>将其填入config.yml文件，填好的示例如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901161832555.png" alt="示例"></p><h3 id="sendKey字段填写"><a href="#sendKey字段填写" class="headerlink" title="sendKey字段填写"></a>sendKey字段填写</h3><p>sendKey字段代表Server酱的key值，通过微信扫描登录Server酱，Server酱地址：<a href="https://sct.ftqq.com/">https://sct.ftqq.com/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901162141349.png" alt="Server酱"></p><p>之后将获得的sendKey复制到该字段中</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901162258308.png" alt="sendKey"></p><h3 id="forms内容"><a href="#forms内容" class="headerlink" title="forms内容"></a>forms内容</h3><p>对于forms字段，只需修改下图所示部分即可，只需填写你当前在什么地方，必须和<code>address</code>所在的省市区对应</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901162532896.png" alt="forms内容"></p><p>该内容对应于今日校园中的如下内容</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901162748317.png" alt="今日校园"></p><div class="note info no-icon flat"><p>对于详细地址字段，目前还不知道怎么填充，不过不填因为无所谓，后期有精力可以通过抓包继续研究</p></div><h2 id="system-yml文件修改"><a href="#system-yml文件修改" class="headerlink" title="system.yml文件修改"></a>system.yml文件修改</h2><p>因为本项目实现方式是通过模拟登录获取cookie之后使用cookie中的sessionid去访问今日校园信息上报的接口的，在登录的时候，需要用到验证码</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901163205936.png" alt="验证码"></p><p>所以需要使用OCR技术将图片中的验证码给解析出来，腾讯云提供了在线的解析方法，只需登录腾讯云之后开通OCR服务（他每个月有免费的额度，免费额度足够使用，不用担心付费的问题)</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901163649424.png" alt="OCR免费额度"></p><h3 id="开通OCR服务"><a href="#开通OCR服务" class="headerlink" title="开通OCR服务"></a>开通OCR服务</h3><p>前往<a href="https://console.cloud.tencent.com/ocr/overview">https://console.cloud.tencent.com/ocr/overview</a>  进行开通，没有腾讯云账号的需要先注册</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901163815694.png" alt="开通OCR服务"></p><p>获取<code>SecretId</code>和<code>SecretKey</code>，前往<a href="https://console.cloud.tencent.com/cam/capi">https://console.cloud.tencent.com/cam/capi</a> 创建和获取</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901164122092.png" alt="获取`SecretId`和`SecretKey`"></p><p>将<code>SecretId</code>和<code>SecretKey</code>填入system.yml文件</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901164319115.png" alt="system.yml文件"></p><p>至此，修改已经完成</p><h1 id="实现自动化提交信息"><a href="#实现自动化提交信息" class="headerlink" title="实现自动化提交信息"></a>实现自动化提交信息</h1><p>为了实现自动化提交信息，我们可以利用GitHub Actions、腾讯云函数、阿里云函数、自己的服务器定时任务的方式开通，这里采用<code>阿里云函数</code></p><p>注意：如果你是将Github仓库中的项目克隆到本地运行的方式，你需要将项目中的所有文件压缩为一个<code>.zip</code>文件</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901164650167.png" alt="文件"></p><p>全部选中上述文件之后压缩</p><p>如果使用的是下载我提供的压缩包的方式，则可以直接使用我提供的压缩包</p><h2 id="阿里云函数的使用"><a href="#阿里云函数的使用" class="headerlink" title="阿里云函数的使用"></a>阿里云函数的使用</h2><p>如果没有注册过阿里云，则需要先注册阿里云，之后访问：<a href="https://fc.console.aliyun.com/fc/service/cn-shanghai/DayStudy/function/handler/overview">https://fc.console.aliyun.com/fc/service/cn-shanghai/DayStudy/function/handler/overview</a></p><h3 id="选择地区"><a href="#选择地区" class="headerlink" title="选择地区"></a>选择地区</h3><p>可以先选择一个地区，比如上海</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901165208325.png" alt="选择地区"></p><h3 id="新建函数"><a href="#新建函数" class="headerlink" title="新建函数"></a>新建函数</h3><p>在服务及函数中新建一个函数</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901165347259.png" alt="新建函数"></p><p>选择<code>事件函数</code>下的<code>配置部署</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901165509144.png" alt="事件函数"></p><p>之后填写如下信息</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901165607426.png" alt="新建函数"></p><p>并将本地压缩的压缩包或者通过我提供的下载链接中下载下来的压缩包上传，之后点击新建</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901165715342.png" alt="新建"></p><p>等待一段时间，压缩包会自动解压并解析出代码</p><font color="red">注意，如果之前没有修改过system.yml和config.yml配置文件的话，可以进行在线修改</font><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901170029635.png" alt="在线修改"></p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>执行代码确认是否正确</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901170105956.png" alt="执行"></p><p>如果执行没有问题，则可以设置触发器来实现固定时间自动提交的功能</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901170220714.png" alt="成功"></p><h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>点击创建触发器</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901170250443.png" alt="创建触发器"></p><p>触发器填写说明</p><div class="table-container"><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>触发器类型</td><td>定时触发器</td></tr><tr><td>触发器名称</td><td>自己定义</td></tr><tr><td>触发版本/别名</td><td>LATEST</td></tr><tr><td>时间配置</td><td>Cron表达式<font color="red">填写方式请看下方说明</font></td></tr><tr><td>启用触发器</td><td>打开</td></tr><tr><td>触发消息</td><td>{awesome-fc}</td></tr></tbody></table></div><div class="note info no-icon flat"><p>Cron以UTC时间运行，即北京时间减去8个小时，比如需要在每天的上午7点5分执行函数，则Cron表达式为：<code>0 5 23 * * *</code>，以为需要使用7点减去8小时，同理，需要在每天的上午7点5分执行函数，则Cron表达式为：<code>0 5 0 * * *</code>，更多表达式的值请自行了解。</p></div><p>设置好的触发器如下</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901170323944.png" alt="image-20210901170323944"></p><p>点击确定即可完成配置，可以解放双手啦！！！</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901171736104.png" alt="解放双手"></p><p>查看提交结果</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.5/image-20210901171828887.png" alt="查看提交结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;div class=&quot;note info no-icon flat&quot;&gt;&lt;p&gt;本项目基于&lt;a href=&quot;https://github.com/t</summary>
      
    
    
    
    <category term="今日校园" scheme="https://blog.just-null.cn/categories/%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD/"/>
    
    
    <category term="今日校园" scheme="https://blog.just-null.cn/tags/%E4%BB%8A%E6%97%A5%E6%A0%A1%E5%9B%AD/"/>
    
    <category term="昆明学院" scheme="https://blog.just-null.cn/tags/%E6%98%86%E6%98%8E%E5%AD%A6%E9%99%A2/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot Data操作ElasticSearch</title>
    <link href="https://blog.just-null.cn/posts/springboot_es.html"/>
    <id>https://blog.just-null.cn/posts/springboot_es.html</id>
    <published>2021-07-23T02:25:40.000Z</published>
    <updated>2021-07-23T02:30:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建SpringBoot项目"><a href="#创建SpringBoot项目" class="headerlink" title="创建SpringBoot项目"></a>创建SpringBoot项目</h1><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725200104916.png" alt="创建SpringBoot项目"></p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编写yml配置"><a href="#编写yml配置" class="headerlink" title="编写yml配置"></a>编写yml配置</h2><ul><li>spring-data(新版本推荐配置)  RestHighLevelClient  rest客户端     ElasticSearchRespositoy接口</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestClientConfig</span> <span class="keyword">extends</span> <span class="title">AbstractElasticsearchConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">elasticsearchClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ClientConfiguration clientConfiguration = ClientConfiguration.builder()</span><br><span class="line">                .connectedTo(<span class="string">&quot;10.211.55.5:9200&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> RestClients.create(clientConfiguration).rest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写domain"><a href="#编写domain" class="headerlink" title="编写domain"></a>编写domain</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * indecName: 用来指定这个对象转为Json存入的文档（Es服务器中之前不能存在此索引名）</span></span><br><span class="line"><span class="comment"> * type：用来指定当前这个索引下创建的类型名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;ems&quot;, type = &quot;emp&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Integer)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Date)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date bir;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success simple"><p><code>@Document</code>: 代表一个文档记录 </p><p>​    <code>indexName</code>:  用来指定索引名称</p><p>​    <code>type</code>:        用来指定索引类型</p><p><code>@Id</code>: 用来将对象中id和ES中_id映射</p><p><code>@Field</code>: 用来指定ES中的字段对应Mapping</p><p>​    <code>type</code>: 用来指定ES中存储类型</p><p>​    <code>analyzer</code>: 用来指定使用哪种分词器</p></div><h2 id="编写EmpRepository"><a href="#编写EmpRepository" class="headerlink" title="编写EmpRepository"></a>编写EmpRepository</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * String 代表id的类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Emp</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="索引or更新一条记录"><a href="#索引or更新一条记录" class="headerlink" title="索引or更新一条记录"></a>索引or更新一条记录</h2><div class="note success simple"><p>这种方式根据实体类中中配置自动在ES创建索引,类型以及映射</p></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加索引和更新索引 id 存在更新 不存在添加</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Emp s = <span class="keyword">new</span> Emp(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;Just&quot;</span>,<span class="number">20</span>,<span class="keyword">new</span> Date(),<span class="string">&quot;SpringData操作ES&quot;</span>,<span class="string">&quot;这里是地址&quot;</span>);</span><br><span class="line">    empRepository.save(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除一条记录"><a href="#删除一条记录" class="headerlink" title="删除一条记录"></a>删除一条记录</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据Id删除一条索引</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    empRepository.deleteById(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除所有"><a href="#删除所有" class="headerlink" title="删除所有"></a>删除所有</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除全部</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    empRepository.deleteAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="查询一条记录"><a href="#查询一条记录" class="headerlink" title="查询一条记录"></a>查询一条记录</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询一条记录</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Optional&lt;Emp&gt; optional = empRepository.findById(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    System.out.println(optional.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210726085715213.png" alt="查询一条记录"></p><h3 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询所有</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Iterable&lt;Emp&gt; all = empRepository.findAll();</span><br><span class="line">    <span class="keyword">for</span>(Emp e : all)&#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210726090004200.png" alt="查询所有"></p><h3 id="查询排序"><a href="#查询排序" class="headerlink" title="查询排序"></a>查询排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 排序查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAllOrder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Iterable&lt;Emp&gt; all = empRepository.findAll(Sort.by(Sort.Order.asc(<span class="string">&quot;age&quot;</span>)));</span><br><span class="line">    <span class="keyword">for</span>(Emp e : all)&#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210726090235273.png" alt="查询排序"></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Page&lt;Emp&gt; search = empRepository.search(QueryBuilders.matchAllQuery(), PageRequest.of(<span class="number">0</span>, <span class="number">5</span>));</span><br><span class="line">    <span class="keyword">for</span>(Emp e : search)&#123;</span><br><span class="line">        System.out.println(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义基本查询"><a href="#自定义基本查询" class="headerlink" title="自定义基本查询"></a>自定义基本查询</h2><div class="table-container"><table><thead><tr><th>Keyword</th><th>Sample</th><th>Elasticsearch Query String</th></tr></thead><tbody><tr><td><code>And</code></td><td><code>findByNameAndPrice</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td></tr><tr><td><code>Or</code></td><td><code>findByNameOrPrice</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;price&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;</code></td></tr><tr><td><code>Is</code></td><td><code>findByName</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Not</code></td><td><code>findByNameNot</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Between</code></td><td><code>findByPriceBetween</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>LessThanEqual</code></td><td><code>findByPriceLessThan</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>GreaterThanEqual</code></td><td><code>findByPriceGreaterThan</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Before</code></td><td><code>findByPriceBefore</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : null,&quot;to&quot; : ?,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>After</code></td><td><code>findByPriceAfter</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;range&quot; : &#123;&quot;price&quot; : &#123;&quot;from&quot; : ?,&quot;to&quot; : null,&quot;include_lower&quot; : true,&quot;include_upper&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Like</code></td><td><code>findByNameLike</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>StartingWith</code></td><td><code>findByNameStartingWith</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;?*&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>EndingWith</code></td><td><code>findByNameEndingWith</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;*?&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Contains/Containing</code></td><td><code>findByNameContaining</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &#123;&quot;query&quot; : &quot;**?**&quot;,&quot;analyze_wildcard&quot; : true&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>In</code></td><td><code>findByNameIn</code><br><code>(Collection&lt;String&gt;names)</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : [ &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;, &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125; ]&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>NotIn</code></td><td><code>findByNameNotIn</code><br><code>(Collection&lt;String&gt;names)</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must_not&quot; : &#123;&quot;bool&quot; : &#123;&quot;should&quot; : &#123;&quot;field&quot; : &#123;&quot;name&quot; : &quot;?&quot;&#125;&#125;&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>Near</code></td><td><code>findByStoreNear</code></td><td><code>Not Supported Yet !</code></td></tr><tr><td><code>True</code></td><td><code>findByAvailableTrue</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : true&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>False</code></td><td><code>findByAvailableFalse</code></td><td><code>&#123;&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : false&#125;&#125;&#125;&#125;</code></td></tr><tr><td><code>OrderBy</code></td><td><code>findByAvailable</code><br><code>TrueOrderByNameDesc</code></td><td><code>&#123;&quot;sort&quot; : [&#123; &quot;name&quot; : &#123;&quot;order&quot; : &quot;desc&quot;&#125; &#125;],&quot;bool&quot; : &#123;&quot;must&quot; : &#123;&quot;field&quot; : &#123;&quot;available&quot; : true&#125;&#125;&#125;&#125;</code></td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmpRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Emp</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//根据姓名查询</span></span><br><span class="line">    <span class="function">List&lt;Emp&gt; <span class="title">findByName</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="comment">//根据年龄查询</span></span><br><span class="line">    <span class="function">List&lt;Emp&gt; <span class="title">findByAge</span><span class="params">(Integer age)</span></span>;</span><br><span class="line">    <span class="comment">//根据姓名和地址查询</span></span><br><span class="line">    <span class="function">List&lt;Emp&gt; <span class="title">findByNameAndAddress</span><span class="params">(String name,String address)</span></span>;</span><br><span class="line">    <span class="comment">//根据姓名或年龄查询</span></span><br><span class="line">    <span class="function">List&lt;Emp&gt; <span class="title">findByNameOrAge</span><span class="params">(String name,Integer age)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//范围查询</span></span><br><span class="line">    <span class="function">List&lt;Emp&gt; <span class="title">findByAgeBetween</span><span class="params">(Double start,Double end)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时候只需调用方法并传递参数即可</p><h2 id="实现复杂查询"><a href="#实现复杂查询" class="headerlink" title="实现复杂查询"></a>实现复杂查询</h2><h3 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//高亮查询并排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHighlight</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//创建搜索请求</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="string">&quot;ems&quot;</span>);</span><br><span class="line">    <span class="comment">//创建搜索对象</span></span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    searchSourceBuilder.query(QueryBuilders.termQuery(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;操作&quot;</span>))</span><br><span class="line">            .sort(<span class="string">&quot;age&quot;</span>, SortOrder.ASC)</span><br><span class="line">            .from(<span class="number">0</span>)</span><br><span class="line">            .size(<span class="number">5</span>)</span><br><span class="line">            .highlighter(<span class="keyword">new</span> HighlightBuilder().field(<span class="string">&quot;*&quot;</span>).requireFieldMatch(<span class="keyword">false</span>).preTags(<span class="string">&quot;&lt;span style=&#x27;color:red;&#x27;&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>));</span><br><span class="line">    searchRequest.types(<span class="string">&quot;emp&quot;</span>).source(searchSourceBuilder);</span><br><span class="line">    <span class="comment">//执行搜索</span></span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;原始文档-----------&quot;</span>);</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">        highlightFields.forEach((k,v)-&gt; System.out.println(<span class="string">&quot;key: &quot;</span>+k + <span class="string">&quot; value: &quot;</span>+v.fragments()[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210726093158282.png" alt="高亮查询"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建SpringBoot项目&quot;&gt;&lt;a href=&quot;#创建SpringBoot项目&quot; class=&quot;headerlink&quot; title=&quot;创建SpringBoot项目&quot;&gt;&lt;/a&gt;创建SpringBoot项目&lt;/h1&gt;&lt;p&gt;&lt;img src= &quot;/img/loadin</summary>
      
    
    
    
    <category term="ElasticSearch" scheme="https://blog.just-null.cn/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="https://blog.just-null.cn/tags/ElasticSearch/"/>
    
    <category term="SpringBoot Data" scheme="https://blog.just-null.cn/tags/SpringBoot-Data/"/>
    
  </entry>
  
  <entry>
    <title>Java操作ElasticSearch</title>
    <link href="https://blog.just-null.cn/posts/java_es.html"/>
    <id>https://blog.just-null.cn/posts/java_es.html</id>
    <published>2021-07-22T02:25:40.000Z</published>
    <updated>2021-07-22T02:30:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java操作ES检索和索引"><a href="#java操作ES检索和索引" class="headerlink" title="java操作ES检索和索引"></a>java操作ES检索和索引</h1><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/javaczes.jpg" alt="java操作ES检索和索引"></p><h1 id="引入maven依赖"><a href="#引入maven依赖" class="headerlink" title="引入maven依赖"></a>引入maven依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.plugin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transport-netty4-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="索引的相关操作"><a href="#索引的相关操作" class="headerlink" title="索引的相关操作"></a>索引的相关操作</h1><h2 id="创建客户端操作对象"><a href="#创建客户端操作对象" class="headerlink" title="创建客户端操作对象"></a>创建客户端操作对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">    <span class="comment">//创建ES对象</span></span><br><span class="line">    TransportClient transportClient = <span class="keyword">new</span> PreBuiltTransportClient(Settings.EMPTY);</span><br><span class="line">    <span class="comment">//设置Es服务器主机和端口</span></span><br><span class="line">    transportClient.addTransportAddress(<span class="keyword">new</span> TransportAddress(InetAddress.getByName(<span class="string">&quot;10.211.55.5&quot;</span>),<span class="number">9300</span>));</span><br><span class="line">    <span class="comment">//操作</span></span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    transportClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestIndexAndTypeMapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TransportClient transportClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> UnknownHostException </span>&#123;</span><br><span class="line">        <span class="comment">//创建ES对象</span></span><br><span class="line">        <span class="keyword">this</span>.transportClient = <span class="keyword">new</span> PreBuiltTransportClient(Settings.EMPTY);</span><br><span class="line">        <span class="comment">//设置Es服务器主机和端口</span></span><br><span class="line">        transportClient.addTransportAddress(<span class="keyword">new</span> TransportAddress(InetAddress.getByName(<span class="string">&quot;10.211.55.5&quot;</span>), <span class="number">9300</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        transportClient.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建索引</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建索引</span></span><br><span class="line">        CreateIndexResponse createIndexResponse = transportClient.admin().indices().prepareCreate(<span class="string">&quot;ems&quot;</span>).get();</span><br><span class="line">        <span class="comment">//获取信息</span></span><br><span class="line">        <span class="keyword">boolean</span> acknowledged = createIndexResponse.isAcknowledged();</span><br><span class="line">        System.out.println(acknowledged);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    AcknowledgedResponse acknowledgedResponse = transportClient.admin().indices().prepareDelete(<span class="string">&quot;ems&quot;</span>).get();</span><br><span class="line">    System.out.println(acknowledgedResponse.isAcknowledged());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h1><p>先使用kibana在ems索引下添加一个emp类型</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /ems</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;emp&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;bir&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;date&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;content&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;address&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入fastjson依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指定id添加文档"><a href="#指定id添加文档" class="headerlink" title="指定id添加文档"></a>指定id添加文档</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一个文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexOptionId</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Emp emp = <span class="keyword">new</span> Emp(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;Just&quot;</span>, <span class="number">23</span>, <span class="keyword">new</span> Date(),<span class="string">&quot;使用Java添加一个文档&quot;</span>,<span class="string">&quot;这里是地址&quot;</span>);</span><br><span class="line">    String s = JSONObject.toJSONString(emp);</span><br><span class="line">    IndexResponse indexResponse = transportClient.prepareIndex(<span class="string">&quot;ems&quot;</span>, <span class="string">&quot;emp&quot;</span>, emp.getId()).setSource(s, XContentType.JSON).get();</span><br><span class="line">    System.out.println(indexResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定生成id添加文档"><a href="#自定生成id添加文档" class="headerlink" title="自定生成id添加文档"></a>自定生成id添加文档</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一个文档,自动is</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createIndexAutoId</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Emp emp = <span class="keyword">new</span> Emp(<span class="keyword">null</span>,<span class="string">&quot;Just1&quot;</span>, <span class="number">23</span>, <span class="keyword">new</span> Date(),<span class="string">&quot;使用Java添加一个文档,自动is&quot;</span>,<span class="string">&quot;这里是地址&quot;</span>);</span><br><span class="line">    String s = JSONObject.toJSONString(emp);</span><br><span class="line">    IndexResponse indexResponse = transportClient.prepareIndex(<span class="string">&quot;ems&quot;</span>, <span class="string">&quot;emp&quot;</span>).setSource(s, XContentType.JSON).get();</span><br><span class="line">    System.out.println(indexResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新一条文档"><a href="#更新一条文档" class="headerlink" title="更新一条文档"></a>更新一条文档</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新一条文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Emp emp = <span class="keyword">new</span> Emp(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;Just&quot;</span>, <span class="number">23</span>, <span class="keyword">new</span> Date(),<span class="string">&quot;使用Java更新一个文档&quot;</span>,<span class="string">&quot;这里是地址&quot;</span>);</span><br><span class="line">    String s = JSONObject.toJSONString(emp);</span><br><span class="line">    UpdateResponse updateResponse = transportClient.prepareUpdate(<span class="string">&quot;ems&quot;</span>,<span class="string">&quot;emp&quot;</span>,emp.getId()).setDoc(s,XContentType.JSON).get();</span><br><span class="line">    System.out.println(updateResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除一条文档"><a href="#删除一条文档" class="headerlink" title="删除一条文档"></a>删除一条文档</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除一条文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DeleteResponse deleteResponse = transportClient.prepareDelete(<span class="string">&quot;ems&quot;</span>, <span class="string">&quot;emp&quot;</span>, <span class="string">&quot;1&quot;</span>).get();</span><br><span class="line">    System.out.println(deleteResponse.status());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量更新</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBulk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//添加第一条记录</span></span><br><span class="line">    IndexRequest request1 = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;ems&quot;</span>, <span class="string">&quot;emp&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    Emp emp = <span class="keyword">new</span> Emp(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;Just2&quot;</span>, <span class="number">23</span>, <span class="keyword">new</span> Date(), <span class="string">&quot;添加&quot;</span>, <span class="string">&quot;这里是地址&quot;</span>);</span><br><span class="line">    request1.source(JSONObject.toJSONString(emp), XContentType.JSON);</span><br><span class="line">    <span class="comment">//添加第二条记录</span></span><br><span class="line">    IndexRequest request2 = <span class="keyword">new</span> IndexRequest(<span class="string">&quot;ems&quot;</span>, <span class="string">&quot;emp&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    Emp emp2 = <span class="keyword">new</span> Emp(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;Just3&quot;</span>, <span class="number">23</span>, <span class="keyword">new</span> Date(), <span class="string">&quot;添加&quot;</span>, <span class="string">&quot;这里是地址&quot;</span>);</span><br><span class="line">    request2.source(JSONObject.toJSONString(emp2), XContentType.JSON);</span><br><span class="line">    <span class="comment">//更新记录</span></span><br><span class="line">    UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">&quot;ems&quot;</span>, <span class="string">&quot;emp&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    Emp empUpdate = <span class="keyword">new</span> Emp();</span><br><span class="line">    empUpdate.setName(<span class="string">&quot;Just更新&quot;</span>);</span><br><span class="line">    updateRequest.doc(JSONObject.toJSONString(empUpdate), XContentType.JSON);</span><br><span class="line">    <span class="comment">//删除一条记录</span></span><br><span class="line">    DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(<span class="string">&quot;ems&quot;</span>, <span class="string">&quot;emp&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    BulkResponse bulkItemResponses = transportClient.prepareBulk().add(request1).add(request2).add(updateRequest).add(deleteRequest).get();</span><br><span class="line">    BulkItemResponse[] items = bulkItemResponses.getItems();</span><br><span class="line">    <span class="keyword">for</span> (BulkItemResponse item : items) &#123;</span><br><span class="line">        System.out.println(item.status());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检索记录"><a href="#检索记录" class="headerlink" title="检索记录"></a>检索记录</h1><h2 id="查询一条文档"><a href="#查询一条文档" class="headerlink" title="查询一条文档"></a>查询一条文档</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询一条文档</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GetResponse documentFields = transportClient.prepareGet(<span class="string">&quot;ems&quot;</span>, <span class="string">&quot;emp&quot;</span>, <span class="string">&quot;1&quot;</span>).get();</span><br><span class="line">    System.out.println(documentFields.getSourceAsString());<span class="comment">//转换为String并输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725171121848.png" alt="查询一条文档"></p><h2 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询所有</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//查询条件</span></span><br><span class="line">    MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>).setTypes(<span class="string">&quot;emp&quot;</span>).setQuery(matchAllQueryBuilder).get();</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数&quot;</span>+searchResponse.getHits().getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;最大得分&quot;</span>+searchResponse.getHits().getMaxScore());</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span>(SearchHit hit : hits)&#123;</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725175648588.png" alt="查询所有"></p><h2 id="查询所有并排序"><a href="#查询所有并排序" class="headerlink" title="查询所有并排序"></a>查询所有并排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询所有并排序</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearchAndSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//查询条件</span></span><br><span class="line">    MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>)</span><br><span class="line">            .setTypes(<span class="string">&quot;emp&quot;</span>)</span><br><span class="line">            .setQuery(matchAllQueryBuilder)</span><br><span class="line">            .addSort(<span class="string">&quot;age&quot;</span>, SortOrder.DESC)<span class="comment">//降序排序</span></span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数&quot;</span>+searchResponse.getHits().getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;最大得分&quot;</span>+searchResponse.getHits().getMaxScore());</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span>(SearchHit hit : hits)&#123;</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725181209998.png" alt="查询所有并排序"></p><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearchAndSort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//查询条件</span></span><br><span class="line">    MatchAllQueryBuilder matchAllQueryBuilder = QueryBuilders.matchAllQuery();</span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>)</span><br><span class="line">            .setTypes(<span class="string">&quot;emp&quot;</span>)</span><br><span class="line">            .setQuery(matchAllQueryBuilder)</span><br><span class="line">            .setFrom(<span class="number">1</span>)<span class="comment">//起始条数，默认为0</span></span><br><span class="line">            .setSize(<span class="number">3</span>)<span class="comment">//每页显示的条数</span></span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数&quot;</span>+searchResponse.getHits().getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;最大得分&quot;</span>+searchResponse.getHits().getMaxScore());</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span>(SearchHit hit : hits)&#123;</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725181052074.png" alt="分页查询"></p><h2 id="term查询"><a href="#term查询" class="headerlink" title="term查询"></a>term查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//term查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQuery</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;content&quot;</span>,<span class="string">&quot;java&quot;</span>);</span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>)</span><br><span class="line">            .setTypes(<span class="string">&quot;emp&quot;</span>)</span><br><span class="line">            .setQuery(termQueryBuilder)</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的条数&quot;</span>+searchResponse.getHits().getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的最大得分&quot;</span>+searchResponse.getHits().getMaxScore());</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span>(SearchHit hit : hits)&#123;</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725180333220.png" alt="term查询"></p><h2 id="prefix查询"><a href="#prefix查询" class="headerlink" title="prefix查询"></a>prefix查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//prefix查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPrefix</span><span class="params">()</span></span>&#123;</span><br><span class="line">    PrefixQueryBuilder prefixQueryBuilder = QueryBuilders.prefixQuery(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;张&quot;</span>);</span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>)</span><br><span class="line">            .setTypes(<span class="string">&quot;emp&quot;</span>)</span><br><span class="line">            .setQuery(prefixQueryBuilder)</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的条数&quot;</span>+searchResponse.getHits().getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的最大得分&quot;</span>+searchResponse.getHits().getMaxScore());</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span>(SearchHit hit : hits)&#123;</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725181745013.png" alt="prefix查询"></p><h2 id="wildcard查询"><a href="#wildcard查询" class="headerlink" title="wildcard查询"></a>wildcard查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//wildcard查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWildcard</span><span class="params">()</span></span>&#123;</span><br><span class="line">    WildcardQueryBuilder wildcardQueryBuilder = QueryBuilders.wildcardQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张*&quot;</span>);</span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>)</span><br><span class="line">            .setTypes(<span class="string">&quot;emp&quot;</span>)</span><br><span class="line">            .setQuery(wildcardQueryBuilder)</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的条数&quot;</span>+searchResponse.getHits().getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的最大得分&quot;</span>+searchResponse.getHits().getMaxScore());</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span>(SearchHit hit : hits)&#123;</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725181745013.png" alt="wildcard查询"></p><h2 id="Ids查询"><a href="#Ids查询" class="headerlink" title="Ids查询"></a>Ids查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ids 查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIds</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IdsQueryBuilder idsQueryBuilder = QueryBuilders.idsQuery().addIds(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>)</span><br><span class="line">            .setTypes(<span class="string">&quot;emp&quot;</span>)</span><br><span class="line">            .setQuery(idsQueryBuilder)</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的条数&quot;</span>+searchResponse.getHits().getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的最大得分&quot;</span>+searchResponse.getHits().getMaxScore());</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span>(SearchHit hit : hits)&#123;</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725182144834.png" alt="Ids查询"></p><h2 id="fuzzy模糊查询"><a href="#fuzzy模糊查询" class="headerlink" title="fuzzy模糊查询"></a>fuzzy模糊查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//fuzzy模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFuzzy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FuzzyQueryBuilder fuzzyQueryBuilder = QueryBuilders.fuzzyQuery(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;框架&quot;</span>);</span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>)</span><br><span class="line">            .setTypes(<span class="string">&quot;emp&quot;</span>)</span><br><span class="line">            .setQuery(fuzzyQueryBuilder)</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的条数&quot;</span>+searchResponse.getHits().getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的最大得分&quot;</span>+searchResponse.getHits().getMaxScore());</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span>(SearchHit hit : hits)&#123;</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725182823346.png" alt="fuzzy模糊查询"></p><h2 id="bool-查询"><a href="#bool-查询" class="headerlink" title="bool 查询"></a>bool 查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bool查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBool</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">    boolQueryBuilder.should(QueryBuilders.matchAllQuery());</span><br><span class="line">    boolQueryBuilder.mustNot(QueryBuilders.rangeQuery(<span class="string">&quot;age&quot;</span>).lte(<span class="number">8</span>));</span><br><span class="line">    boolQueryBuilder.must(QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小黑&quot;</span>));</span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>)</span><br><span class="line">            .setTypes(<span class="string">&quot;emp&quot;</span>)</span><br><span class="line">            .setQuery(boolQueryBuilder)</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的条数&quot;</span>+searchResponse.getHits().getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的最大得分&quot;</span>+searchResponse.getHits().getMaxScore());</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span>(SearchHit hit : hits)&#123;</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725183121086.png" alt="bool 查询"></p><h2 id="高亮查询"><a href="#高亮查询" class="headerlink" title="高亮查询"></a>高亮查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//高亮查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHighlight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;小黑&quot;</span>);</span><br><span class="line">    HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">    highlightBuilder.requireFieldMatch(<span class="keyword">false</span>).field(<span class="string">&quot;name&quot;</span>).field(<span class="string">&quot;content&quot;</span>).preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>)</span><br><span class="line">            .setTypes(<span class="string">&quot;emp&quot;</span>)</span><br><span class="line">            .setQuery(termQueryBuilder)</span><br><span class="line">            .highlighter(highlightBuilder)</span><br><span class="line">            .get();</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的条数&quot;</span> + searchResponse.getHits().getTotalHits());</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的最大得分&quot;</span> + searchResponse.getHits().getMaxScore());</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">        System.out.println(<span class="string">&quot;================高亮之前==========&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : sourceAsMap.entrySet()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + entry.getKey() + <span class="string">&quot;   value: &quot;</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;================高亮之后==========&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : sourceAsMap.entrySet()) &#123;</span><br><span class="line">            HighlightField highlightField = highlightFields.get(entry.getKey());</span><br><span class="line">            <span class="keyword">if</span> (highlightField != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;key: &quot;</span> + entry.getKey() + <span class="string">&quot;   value: &quot;</span> + highlightField.fragments()[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;key: &quot;</span> + entry.getKey() + <span class="string">&quot;   value: &quot;</span> + entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725183815846.png" alt="高亮查询"></p><h2 id="过滤查询"><a href="#过滤查询" class="headerlink" title="过滤查询"></a>过滤查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//过滤查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(<span class="string">&quot;age&quot;</span>).gte(<span class="number">0</span>).lte(<span class="number">10</span>);</span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>)</span><br><span class="line">            .setTypes(<span class="string">&quot;emp&quot;</span>)</span><br><span class="line">            .setPostFilter(rangeQueryBuilder)</span><br><span class="line">            .setQuery(QueryBuilders.matchAllQuery())</span><br><span class="line">            .get();</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725184638012.png" alt="过滤查询"></p><h2 id="查询整合"><a href="#查询整合" class="headerlink" title="查询整合"></a>查询整合</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSearchPlus</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SearchResponse searchResponse = transportClient.prepareSearch(<span class="string">&quot;ems&quot;</span>)</span><br><span class="line">            .setTypes(<span class="string">&quot;emp&quot;</span>)<span class="comment">//类型</span></span><br><span class="line">            .setFrom(<span class="number">0</span>)<span class="comment">//起始条数</span></span><br><span class="line">            .setSize(<span class="number">20</span>)<span class="comment">//每页显示的条数</span></span><br><span class="line">            .addSort(<span class="string">&quot;age&quot;</span>,SortOrder.DESC)<span class="comment">//对age字段进行降序排序</span></span><br><span class="line">            .setSource(SearchSourceBuilder.searchSource().fetchSource(<span class="string">&quot;*&quot;</span>,<span class="string">&quot;bir&quot;</span>))<span class="comment">//指定返回的字段</span></span><br><span class="line">            .setPostFilter(QueryBuilders.termQuery(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;小黑&quot;</span>))<span class="comment">//过滤条件</span></span><br><span class="line">            .setQuery(QueryBuilders.multiMatchQuery(<span class="string">&quot;框架&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;content&quot;</span>))<span class="comment">//多字段搜索</span></span><br><span class="line">            <span class="comment">//高亮查询</span></span><br><span class="line">            .highlighter(<span class="keyword">new</span> HighlightBuilder().requireFieldMatch(<span class="keyword">false</span>).field(<span class="string">&quot;name&quot;</span>).field(<span class="string">&quot;content&quot;</span>).preTags(<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>).postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>))</span><br><span class="line">            .get();</span><br><span class="line">    <span class="keyword">long</span> totalHits = searchResponse.getHits().getTotalHits();</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的条数&quot;</span> + totalHits);</span><br><span class="line">    <span class="keyword">float</span> maxScore = searchResponse.getHits().getMaxScore();</span><br><span class="line">    System.out.println(<span class="string">&quot;符合条件的最大得分&quot;</span> + maxScore);</span><br><span class="line">    SearchHit[] hits = searchResponse.getHits().getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">        System.out.println(hit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725190049764.png" alt="查询整合"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java操作ES检索和索引&quot;&gt;&lt;a href=&quot;#java操作ES检索和索引&quot; class=&quot;headerlink&quot; title=&quot;java操作ES检索和索引&quot;&gt;&lt;/a&gt;java操作ES检索和索引&lt;/h1&gt;&lt;p&gt;&lt;img src= &quot;/img/loading.gi</summary>
      
    
    
    
    <category term="Java" scheme="https://blog.just-null.cn/categories/Java/"/>
    
    
    <category term="ElasticSearch" scheme="https://blog.just-null.cn/tags/ElasticSearch/"/>
    
    <category term="Java" scheme="https://blog.just-null.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>IK分词器的使用</title>
    <link href="https://blog.just-null.cn/posts/ik_start.html"/>
    <id>https://blog.just-null.cn/posts/ik_start.html</id>
    <published>2021-07-21T02:25:40.000Z</published>
    <updated>2021-07-21T02:30:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IK分词器的介绍"><a href="#IK分词器的介绍" class="headerlink" title="IK分词器的介绍"></a>IK分词器的介绍</h1><ul><li><p>IK分词器提供了两种mapping类型用来做文档的分词分别是 <code>ik_max_word</code> 和<code>ik_smart</code></p></li><li><p><code>ik_max_word 和 ik_smart 什么区别?</code></p><ul><li><code>ik_max_word: 会将文本做最细粒度的拆分</code>，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合</li><li><code>ik_smart: 会做最粗粒度的拆分</code>，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”</li></ul></li></ul><h1 id="IK分词器的安装"><a href="#IK分词器的安装" class="headerlink" title="IK分词器的安装"></a>IK分词器的安装</h1><p>安装方式请见：</p><h1 id="ik-max-word"><a href="#ik-max-word" class="headerlink" title="ik_max_word"></a>ik_max_word</h1><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210722144643290.png" alt="ik_max_word"></p><h1 id="ik-smart"><a href="#ik-smart" class="headerlink" title="ik_smart"></a>ik_smart</h1><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210722144721823.png" alt="ik_smart"></p><h1 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">DELETE /ems</span><br><span class="line"></span><br><span class="line">PUT /ems</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;emp&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">           <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;bir&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;date&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;content&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;search_analyzer&quot;</span>: <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;address&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /ems/emp/_bulk</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;小黑&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">23</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;北京&quot;</span>&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;王小黑&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">24</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;上海&quot;</span>&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张小五&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">8</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;无锡&quot;</span>&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;win7&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">9</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;南京&quot;</span>&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;梅超风&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">43</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;杭州&quot;</span>&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张无忌&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">59</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;北京&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="测试查询"><a href="#测试查询" class="headerlink" title="测试查询"></a>测试查询</h1><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;content&quot;</span>:<span class="string">&quot;框架&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span>: [<span class="string">&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span>: [<span class="string">&quot;&lt;/span&gt;&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;*&quot;</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210722145410763.png" alt="测试查询"></p><h1 id="配置扩展词"><a href="#配置扩展词" class="headerlink" title="配置扩展词"></a>配置扩展词</h1><h2 id="扩展词典"><a href="#扩展词典" class="headerlink" title="扩展词典"></a>扩展词典</h2><div class="note info no-icon flat"><p>IK支持自定义<code>扩展词典</code>和<code>停用词典</code>,所谓<strong><code>扩展词典</code></strong>就是有些词并不是关键词,但是也希望被ES用来作为检索的关键词,可以将这些词加入扩展词典。<strong><code>停用词典</code></strong>就是有些词是关键词,但是出于业务场景不想使用这些关键词被检索到，可以将这些词放入停用词典。</p><p>如何定义扩展词典和停用词典可以修改IK分词器中<code>config</code>目录中<code>IKAnalyzer.cfg.xml</code>这个文件。</p><p><strong>NOTE：词典的编码必须为UTF-8，否则无法生效</strong></p></div><h2 id="配置扩展词典文件"><a href="#配置扩展词典文件" class="headerlink" title="配置扩展词典文件"></a>配置扩展词典文件</h2><p>进入到挂载到本机中的ik分词器中config中</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725122820382.png" alt="配置扩展词典文件"></p><p>在config目录中创建ext_dict.dic文件   编码一定要为UTF-8才能生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch ext_dict.dic</span><br><span class="line">vim ext_dict.dic</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725122900857.png" alt="文件内容"></p><h1 id="配置停用词典"><a href="#配置停用词典" class="headerlink" title="配置停用词典"></a>配置停用词典</h1><p>在config目录中创建ext_dict.dic文件   编码一定要为UTF-8才能生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch ext_stopword.dic</span><br><span class="line">vim ext_stopword.dic</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725123003601.png" alt="文件内容"></p><p>修改配置文件</p><p>修改config中的<code>IKAnalyzer.cfg.xml</code>文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim IKAnalyzer.cfg.xml</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725124054454.png" alt="修改配置文件"></p><h1 id="重启ES生效"><a href="#重启ES生效" class="headerlink" title="重启ES生效"></a>重启ES生效</h1><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="使用扩展词典前"><a href="#使用扩展词典前" class="headerlink" title="使用扩展词典前"></a>使用扩展词典前</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725122512916.png" alt="使用扩展词典前"></p><div class="note success simple"><p>配置扩展词典前，通过“碰瓷”为关键词，不能搜索到对应的记录</p></div><h3 id="使用扩展词典后"><a href="#使用扩展词典后" class="headerlink" title="使用扩展词典后"></a>使用扩展词典后</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725123835293.png" alt="使用扩展词典后"></p><div class="note success simple"><p>配置扩展词典前，通过“碰瓷”为关键词，可以搜索到对应的记录</p></div><h3 id="使用停用词典前"><a href="#使用停用词典前" class="headerlink" title="使用停用词典前"></a>使用停用词典前</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725122034825.png" alt="使用停用词典前"></p><div class="note success simple"><p>配置停用词典前，通过“今天”为关键词，可以搜索到对应的记录</p></div><h3 id="使用停用词典后"><a href="#使用停用词典后" class="headerlink" title="使用停用词典后"></a>使用停用词典后</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210725124317788.png" alt="使用停用词典后"></p><div class="note success simple"><p>配置停用词典前，通过“今天”为关键词，不能搜索到对应的记录</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IK分词器的介绍&quot;&gt;&lt;a href=&quot;#IK分词器的介绍&quot; class=&quot;headerlink&quot; title=&quot;IK分词器的介绍&quot;&gt;&lt;/a&gt;IK分词器的介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IK分词器提供了两种mapping类型用来做文档的分词分别是 &lt;code&gt;</summary>
      
    
    
    
    <category term="IK分词器" scheme="https://blog.just-null.cn/categories/IK%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    
    
    <category term="ElasticSearch" scheme="https://blog.just-null.cn/tags/ElasticSearch/"/>
    
    <category term="IK分词器" scheme="https://blog.just-null.cn/tags/IK%E5%88%86%E8%AF%8D%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch高级检索</title>
    <link href="https://blog.just-null.cn/posts/es_query.html"/>
    <id>https://blog.just-null.cn/posts/es_query.html</id>
    <published>2021-07-21T02:09:40.000Z</published>
    <updated>2021-07-21T02:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="检索方式-search"><a href="#检索方式-search" class="headerlink" title="检索方式 _search"></a>检索方式 _search</h1><p>ES官方提供了两中检索方式:<strong>一种是通过 URL 参数进行搜索,另一种是通过 DSL(Domain Specified Language) 进行搜索</strong>。<strong>官方更推荐使用第二种方式第二种方式是基于传递JSON作为请求体(request body)格式与ES进行交互，这种方式更强大，更简洁</strong>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20200701225025975.png" alt="检索方式 "></p><ul><li><p>使用语法</p><p>URL查询: GET /索引/类型/_search?参数</p><p>DSL查询: GET /索引/类型/_search {}</p></li></ul><h1 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h1><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">DELETE /ems</span><br></pre></td></tr></table></figure><h2 id="创建索引并指定类型"><a href="#创建索引并指定类型" class="headerlink" title="创建索引并指定类型"></a>创建索引并指定类型</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /ems</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;emp&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;properties&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;age&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;bir&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;date&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;content&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;text&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;address&quot;</span>:&#123;</span><br><span class="line">          <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入测试数据"><a href="#插入测试数据" class="headerlink" title="插入测试数据"></a>插入测试数据</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /ems/emp/_bulk</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;小黑&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">23</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;为开发团队选择一款优秀的MVC框架是件难事儿，在众多可行的方案中决择需要很高的经验和水平&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;北京&quot;</span>&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;王小黑&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">24</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;上海&quot;</span>&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张小五&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">8</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;Spring Cloud 作为Java 语言的微服务框架，它依赖于Spring Boot，有快速开发、持续交付和容易部署等特点。Spring Cloud 的组件非常多，涉及微服务的方方面面，井在开源社区Spring 和Netflix 、Pivotal 两大公司的推动下越来越完善&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;无锡&quot;</span>&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;win7&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">9</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;Spring的目标是致力于全方位的简化Java开发。 这势必引出更多的解释， Spring是如何简化Java开发的？&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;南京&quot;</span>&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;梅超风&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">43</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;杭州&quot;</span>&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;index&quot;</span>:&#123;&#125;&#125;</span><br><span class="line">  &#123;<span class="attr">&quot;name&quot;</span>:<span class="string">&quot;张无忌&quot;</span>,<span class="attr">&quot;age&quot;</span>:<span class="number">59</span>,<span class="attr">&quot;bir&quot;</span>:<span class="string">&quot;2012-12-12&quot;</span>,<span class="attr">&quot;content&quot;</span>:<span class="string">&quot;ElasticSearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口&quot;</span>,<span class="attr">&quot;address&quot;</span>:<span class="string">&quot;北京&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="URL检索"><a href="#URL检索" class="headerlink" title="URL检索"></a>URL检索</h1><h2 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search?q=*</span><br></pre></td></tr></table></figure><h2 id="查询并排序"><a href="#查询并排序" class="headerlink" title="查询并排序"></a>查询并排序</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search?q=*&amp;sort=age #根据age进行升序排序</span><br><span class="line">GET /ems/emp/_search?q=*&amp;sort=age:desc  #根据age进行降序排序</span><br></pre></td></tr></table></figure><div class="note success simple"><p>_search 搜索的API<br>          q=*     匹配所有文档<br>          sort    以结果中的指定字段排序</p></div><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>from从哪里开始，size：每页展示几条</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search?q=*&amp;sort=age:desc&amp;size=5&amp;from=0</span><br></pre></td></tr></table></figure><p>分页查询，只显示部分属性</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search?q=*&amp;sort=age:desc&amp;size=5&amp;from=0&amp;_source=name,age,bir</span><br></pre></td></tr></table></figure><h1 id="DSL检索"><a href="#DSL检索" class="headerlink" title="DSL检索"></a>DSL检索</h1><h2 id="查询所有-match-all"><a href="#查询所有-match-all" class="headerlink" title="查询所有(match_all)"></a>查询所有(match_all)</h2><div class="note info no-icon flat"><p><strong>match_all关键字:</strong>  返回索引中的全部文档</p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询所有并排序"><a href="#查询所有并排序" class="headerlink" title="查询所有并排序"></a>查询所有并排序</h2><figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;,</span><br><span class="line">    &quot;sort&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">                &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查询结果中返回指定条数-size"><a href="#查询结果中返回指定条数-size" class="headerlink" title="查询结果中返回指定条数(size)"></a>查询结果中返回指定条数(size)</h2><div class="note info no-icon flat"><p><strong>size 关键字</strong>: 指定查询结果中返回指定条数。  <strong>默认返回值10条</strong></p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">&quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="分页查询-from"><a href="#分页查询-from" class="headerlink" title="分页查询(from)"></a>分页查询(from)</h2><div class="note info no-icon flat"><p><strong>from 关键字</strong>: 用来指定起始返回位置，和<strong>size关键字连用可实现分页效果</strong></p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">      &quot;query&quot;: &#123;&quot;match_all&quot;: &#123;&#125;&#125;,</span><br><span class="line">      &quot;sort&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;age&quot;: &#123;</span><br><span class="line">            &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;size&quot;: 2, </span><br><span class="line">      &quot;from&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询结果中返回指定字段-source"><a href="#查询结果中返回指定字段-source" class="headerlink" title="查询结果中返回指定字段(_source)"></a>查询结果中返回指定字段(_source)</h2><div class="note info no-icon flat"><p><strong>_source 关键字</strong>: 是一个数组,在数组中用来指定展示那些字段</p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">      &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">      &quot;_source&quot;: [&quot;name&quot;, &quot;age&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键词查询-term"><a href="#关键词查询-term" class="headerlink" title="关键词查询(term)"></a>关键词查询(term)</h2><div class="note info no-icon flat"><p><strong>term 关键字</strong>: 用来使用关键词查询</p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;address&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;北京&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success simple"><p><strong>NOTE1:  通过使用term查询得知ES中默认使用分词器为标准分词器(StandardAnalyzer),标准分词器对于英文单词分词,对于中文单字分词</strong>。</p><p><strong>NOTE2:  通过使用term查询得知,在ES的Mapping Type 中 keyword , date ,integer, long , double , boolean or ip 这些类型不分词</strong>，<strong>只有text类型分词</strong>。</p></div><h2 id="范围查询-range"><a href="#范围查询-range" class="headerlink" title="范围查询(range)"></a>范围查询(range)</h2><div class="note info no-icon flat"><p><strong>range 关键字</strong>: 用来指定查询指定范围内的文档</p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: 8, #age &gt;= 8  gt:age &gt; 8</span><br><span class="line">        &quot;lte&quot;: 30 # age &lt;= 30 lt:ag &lt; 30</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前缀查询-prefix"><a href="#前缀查询-prefix" class="headerlink" title="前缀查询(prefix)"></a>前缀查询(prefix)</h2><div class="note info no-icon flat"><p><strong>prefix 关键字</strong>: 用来检索含有指定前缀的关键词的相关文档</p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;prefix&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;redis&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通配符查询-wildcard"><a href="#通配符查询-wildcard" class="headerlink" title="通配符查询(wildcard)"></a>通配符查询(wildcard)</h2><div class="note info no-icon flat"><p><strong>wildcard 关键字</strong>: 通配符查询     <strong>? 用来匹配一个任意字符  * 用来匹配多个任意字符</strong></p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;wildcard&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;re*&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多id查询-ids"><a href="#多id查询-ids" class="headerlink" title="多id查询(ids)"></a>多id查询(ids)</h2><div class="note info no-icon flat"><p><strong>ids 关键字</strong> : 值为数组类型,用来根据一组id获取多个对应的文档</p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET  /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;ids&quot;: &#123;</span><br><span class="line">      &quot;values&quot;: [&quot;id1&quot;,&quot;id2&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模糊查询-fuzzy"><a href="#模糊查询-fuzzy" class="headerlink" title="模糊查询(fuzzy)"></a>模糊查询(fuzzy)</h2><div class="note info no-icon flat"><p><strong>fuzzy 关键字</strong>: 用来模糊查询含有指定关键字的文档</p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;fuzzy&quot;: &#123;</span><br><span class="line">      &quot;content&quot;:&quot;spring&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fuzzy 模糊查询  最大模糊错误 必须在0-2之间</span><br><span class="line"># 搜索关键词长度为 2 不允许存在模糊 0</span><br><span class="line"># 搜索关键词长度为3-5 允许一次模糊 0 1 </span><br><span class="line"># 搜索关键词长度大于5 允许最大2模糊</span><br></pre></td></tr></table></figure><h2 id="布尔查询-bool"><a href="#布尔查询-bool" class="headerlink" title="布尔查询(bool)"></a>布尔查询(bool)</h2><div class="note info no-icon flat"><p><strong>bool 关键字</strong>: 用来组合多个条件实现复杂查询</p><p>​    <strong>must: 相当于&amp;&amp; 同时成立</strong></p><p>​    <strong>should: 相当于|| 成立一个就行</strong></p><p>​    <strong>must_not: 相当于!  不能满足任何一个</strong></p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;age&quot;: &#123;</span><br><span class="line">              &quot;gte&quot;: 0,</span><br><span class="line">              &quot;lte&quot;: 30</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;&quot;wildcard&quot;: &#123;</span><br><span class="line">          &quot;content&quot;: &#123;</span><br><span class="line">            &quot;value&quot;: &quot;redi?&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;age&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高亮查询-highlight"><a href="#高亮查询-highlight" class="headerlink" title="高亮查询(highlight)"></a>高亮查询(highlight)</h2><div class="note info no-icon flat"><p><strong>highlight 关键字</strong>: 可以让符合条件的文档中的关键词高亮</p></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;content&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;spring&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;*&quot;: &#123;&#125;  #表示所有字段中的spring都高亮</span><br><span class="line">      #“content&quot;:&#123;&#125; #表示只对content字段中的spring高亮</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210722141357971.png" alt="高亮查询(highlight)"></p><p>自定义高亮html标签: 可以在highlight中使用<code>pre_tags</code>和<code>post_tags</code></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;:&#123;</span><br><span class="line">    &quot;term&quot;:&#123;</span><br><span class="line">      &quot;content&quot;:&quot;框架&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;highlight&quot;: &#123;</span><br><span class="line">    &quot;pre_tags&quot;: [&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;],</span><br><span class="line">    &quot;post_tags&quot;: [&quot;&lt;/span&gt;&quot;],</span><br><span class="line">    &quot;fields&quot;: &#123;</span><br><span class="line">      &quot;*&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210722141501976.png" alt="自定义高亮html标签"></p><h2 id="多字段查询-multi-match"><a href="#多字段查询-multi-match" class="headerlink" title="多字段查询(multi_match)"></a>多字段查询(multi_match)</h2><div class="note info no-icon flat"><ul><li>多字段查询multi_ match 搜索比较智能</li><li>如果搜索的字段分词他会对query进行先 分词在搜索</li><li>如果搜索的字段不分词，他会直接使用query整体进行该字段搜索</li></ul></div><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;北京&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;address&quot;,&quot;content&quot;] #这里写要检索的指定字段</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210722142356015.png" alt="多字段查询(multi_match)"></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;multi_match&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &quot;北京MVC&quot;,</span><br><span class="line">      &quot;fields&quot;: [&quot;address&quot;,&quot;content&quot;] #这里写要检索的指定字段</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210722142504606.png" alt="多字段查询(multi_match)"></p><h1 id="过滤查询（Filter-Query）"><a href="#过滤查询（Filter-Query）" class="headerlink" title="过滤查询（Filter Query）"></a>过滤查询（Filter Query）</h1><h2 id="过滤查询"><a href="#过滤查询" class="headerlink" title="过滤查询"></a>过滤查询</h2><div class="note info no-icon flat"><p>其实准确来说，ES中的查询操作分为2种: <code>查询(query)</code>和<code>过滤(filter)</code>。<code>查询即是之前提到的query查询，它 (查询)默认会计算每个返回文档的得分，然后根据得分排序</code>。<code>而过滤(filter)只会筛选出符合的文档，并不计算 得分，且它可以缓存文档 。所以，单从性能考虑，过滤比查询更快</code>。 </p><p>换句话说，过滤适合在大范围筛选数据，而查询则适合精确匹配数据。一般应用时， 应先使用过滤操作过滤数据， 然后使用查询匹配数据。 </p></div><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20200703141421055.png" alt="过滤查询"></p><h2 id="过滤语法"><a href="#过滤语法" class="headerlink" title="过滤语法"></a>过滤语法</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;<span class="attr">&quot;match_all&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;gte&quot;</span>: <span class="number">10</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success simple"><p><strong>在执行filter和query时,先执行filter在执行query</strong></p><p><strong>Elasticsearch会自动缓存经常使用的过滤器，以加快性能。</strong></p></div><h2 id="常见的过滤器类型"><a href="#常见的过滤器类型" class="headerlink" title="常见的过滤器类型"></a>常见的过滤器类型</h2><h3 id="term-、-terms-Filter"><a href="#term-、-terms-Filter" class="headerlink" title="term 、 terms Filter"></a>term 、 terms Filter</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search   # 使用term过滤</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;<span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;小黑&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;content&quot;</span>:<span class="string">&quot;框架&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /dangdang/book/_search  #使用terms过滤</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;<span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;content&quot;</span>:[</span><br><span class="line">              <span class="string">&quot;科技&quot;</span>,</span><br><span class="line">              <span class="string">&quot;声音&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ranage-filter"><a href="#ranage-filter" class="headerlink" title="ranage filter"></a>ranage filter</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;<span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;age&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;gte&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="attr">&quot;lte&quot;</span>: <span class="number">20</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="exists-filter"><a href="#exists-filter" class="headerlink" title="exists filter"></a>exists filter</h3><div class="note success simple"><p><strong>过滤存在指定字段,获取字段不为空的索引记录使用</strong></p></div><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;<span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;exists&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;field&quot;</span>:<span class="string">&quot;aaa&quot;</span> #aaa代表字段名</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ids-filter"><a href="#ids-filter" class="headerlink" title="ids filter"></a>ids filter</h3><div class="note success simple"><p><strong><strong>过滤含有指定字段的索引记录（基于id进行过滤）</strong></strong></p></div><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /ems/emp/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;<span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;name&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ids&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;values&quot;</span>: [<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;检索方式-search&quot;&gt;&lt;a href=&quot;#检索方式-search&quot; class=&quot;headerlink&quot; title=&quot;检索方式 _search&quot;&gt;&lt;/a&gt;检索方式 _search&lt;/h1&gt;&lt;p&gt;ES官方提供了两中检索方式:&lt;strong&gt;一种是通过 URL </summary>
      
    
    
    
    <category term="ElasticSearch" scheme="https://blog.just-null.cn/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="https://blog.just-null.cn/tags/ElasticSearch/"/>
    
    <category term="Query" scheme="https://blog.just-null.cn/tags/Query/"/>
    
  </entry>
  
  <entry>
    <title>Kibana的基本操作</title>
    <link href="https://blog.just-null.cn/posts/kibana_start.html"/>
    <id>https://blog.just-null.cn/posts/kibana_start.html</id>
    <published>2021-07-21T02:09:40.000Z</published>
    <updated>2021-07-21T02:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="索引-Index"><a href="#索引-Index" class="headerlink" title="索引(Index)"></a>索引(Index)</h1><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT /dangdang/      创建索引</span><br><span class="line">DELETE /dangdang    删除索引</span><br><span class="line">DELETE /*           删除所有索引</span><br><span class="line">GET /_cat/indices?v 查看索引信息</span><br></pre></td></tr></table></figure><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT /ems</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721214401086.png" alt="创建索引"></p><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /_cat/indices?v </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721214753162.png" alt="查看索引"></p><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">DELETE /ems</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721214934306.png" alt="删除索引"></p><h1 id="类型-type"><a href="#类型-type" class="headerlink" title="类型(type)"></a>类型(type)</h1><h2 id="创建类型"><a href="#创建类型" class="headerlink" title="创建类型"></a>创建类型</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT /ems</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;ems&quot;:&#123;</span><br><span class="line">      &quot;properties&quot;:&#123;</span><br><span class="line">        &quot;id&quot;:&#123;&quot;type&quot;:&quot;text&quot;&#125;,</span><br><span class="line">        &quot;name&quot;:&#123;&quot;type&quot;:&quot;text&quot;&#125;,</span><br><span class="line">        &quot;age&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">        &quot;bir&quot;:&#123;&quot;type&quot;:&quot;date&quot;&#125;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 注意: 这种方式创建类型要求索引不能存在</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721215729111.png" alt="创建类型"></p><h2 id="查看类型"><a href="#查看类型" class="headerlink" title="查看类型"></a>查看类型</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/_mapping/ems # 语法:GET /索引名/_mapping/类型名</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721215903642.png" alt="查看类型"></p><h1 id="文档-document"><a href="#文档-document" class="headerlink" title="文档(document)"></a>文档(document)</h1><h2 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">#添加文档</span><br><span class="line">PUT /ems/ems/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:&quot;1&quot;,</span><br><span class="line">  &quot;name&quot;:&quot;Just&quot;,</span><br><span class="line">  &quot;age&quot;:20,</span><br><span class="line">  &quot;bir&quot;:&quot;2021-07-21&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721220919805.png" alt="添加文档"></p><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">GET /ems/ems/1  </span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721221134384.png" alt="查询文档"></p><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">DELETE /ems/ems/1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721221247819.png" alt="删除文档"></p><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>第一种方式  不保留原始数据更新</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">#不保留原始数据更新</span><br><span class="line">POST /ems/ems/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;Just1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721221831099.png" alt="不保留原始数据更新"></p><p>第二种方式  保留原有的数据</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">#保留原有的数据</span><br><span class="line">POST /ems/ems/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;name&quot;:&quot;Just1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721222117018.png" alt="保留原有的数据"></p><p>保留原有的数据,添加新的数据</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST /ems/ems/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;info&quot;:&quot;你好啊！&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721222357596.png" alt="保留原有的数据,添加新的数据"></p><h2 id="脚本更新"><a href="#脚本更新" class="headerlink" title="脚本更新"></a>脚本更新</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST /ems/ems/1/_update</span><br><span class="line">&#123;</span><br><span class="line">  &quot;script&quot;: &quot;ctx._source.age+=5&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721223301728.png" alt="脚本更新"></p><h2 id="批量操作"><a href="#批量操作" class="headerlink" title="批量操作"></a>批量操作</h2><p>先创建2个文档</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT /ems/ems/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:&quot;1&quot;,</span><br><span class="line">  &quot;name&quot;:&quot;Just&quot;,</span><br><span class="line">  &quot;age&quot;:20,</span><br><span class="line">  &quot;bir&quot;:&quot;2021-07-21&quot;</span><br><span class="line">&#125;</span><br><span class="line">PUT /ems/ems/2</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:&quot;2&quot;,</span><br><span class="line">  &quot;name&quot;:&quot;Just2&quot;,</span><br><span class="line">  &quot;age&quot;:22,</span><br><span class="line">  &quot;bir&quot;:&quot;2021-07-22&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">#文档批量操作 _bulk(批量操作) index(插入) update（更新） delete（删除）</span><br><span class="line">PUT /ems/ems/_bulk</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;3&quot;&#125;&#125;</span><br><span class="line">  &#123;&quot;name&quot;:&quot;Just3&quot;,&quot;age&quot;:23,&quot;bir&quot;:&quot;2020-07-21&quot;&#125;</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line">  &#123;&quot;doc&quot;:&#123;&quot;name&quot;:&quot;Just_null&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;delete&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721224856543.png" alt="操作"></p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">1. 批量索引两个文档</span><br><span class="line">    PUT /dangdang/emp/_bulk</span><br><span class="line"> &#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125; </span><br><span class="line">  &#123;&quot;name&quot;: &quot;John Doe&quot;,&quot;age&quot;:23,&quot;bir&quot;:&quot;2012-12-12&quot;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&quot;_id&quot;:&quot;2&quot;&#125;&#125;  </span><br><span class="line">  &#123;&quot;name&quot;: &quot;Jane Doe&quot;,&quot;age&quot;:23,&quot;bir&quot;:&quot;2012-12-12&quot;&#125;</span><br><span class="line">    </span><br><span class="line">2. 更新文档同时删除文档</span><br><span class="line">    POST /dangdang/emp/_bulk</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_id&quot;:&quot;1&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;:&#123;&quot;name&quot;:&quot;lisi&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;delete&quot;:&#123;&quot;_id&quot;:2&#125;&#125;</span><br><span class="line">&#123;&quot;index&quot;:&#123;&#125;&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;xxx&quot;,&quot;age&quot;:23&#125;</span><br><span class="line"> </span><br><span class="line">注意:批量时不会因为一个失败而全部失败,而是继续执行后续操作,批量在返回时按照执行的状态开始返回</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;索引-Index&quot;&gt;&lt;a href=&quot;#索引-Index&quot; class=&quot;headerlink&quot; title=&quot;索引(Index)&quot;&gt;&lt;/a&gt;索引(Index)&lt;/h1&gt;&lt;h2 id=&quot;基本操作&quot;&gt;&lt;a href=&quot;#基本操作&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Kibana" scheme="https://blog.just-null.cn/categories/Kibana/"/>
    
    
    <category term="ElasticSearch" scheme="https://blog.just-null.cn/tags/ElasticSearch/"/>
    
    <category term="Kibana" scheme="https://blog.just-null.cn/tags/Kibana/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch介绍</title>
    <link href="https://blog.just-null.cn/posts/es_start.html"/>
    <id>https://blog.just-null.cn/posts/es_start.html</id>
    <published>2021-07-21T02:05:40.000Z</published>
    <updated>2021-07-21T02:10:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是RestFul"><a href="#什么是RestFul" class="headerlink" title="什么是RestFul"></a>什么是RestFul</h1><p><strong>REST</strong> : 表现层状态转化(Representational State Transfer)，如果一个架构符合REST原则，就称它为 RESTful 架构风格。 </p><p><strong>资源</strong>: 所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息 </p><p><strong>表现层</strong> :我们把”资源”具体呈现出来的形式，叫做它的”表现层”(Representation)。</p><p>状态转化(State Transfer):如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转 化”(State Transfer)。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</p><div class="note info no-icon flat"><p>REST原则就是指一个URL代表一个唯一资源，并且通过HTTP协议里面四个动词:GET、POST、PUT、DELETE对应四种服务器端的基本操作: GET用来获取资源，POST用来添加资源(也可以用于更新资源)，PUT用来更新资源，DELETE用来删除资源。</p></div><h1 id="什么是全文检索"><a href="#什么是全文检索" class="headerlink" title="什么是全文检索"></a>什么是全文检索</h1><p><strong>全文检索是计算机程序通过扫描文章中的每一个词，对每一个词建立一个索引，指明该词在文章中出现的次数和位置。当用户查询时根据建立的索引查找，类似于通过字典的检索字表查字的过程。</strong></p><p>检索: 索(建立索引)    检:(检索索引)</p><p>全文检索（Full-Text Retrieval(检索)）以文本作为检索对象，找出含有指定词汇的文本。<strong>全面、准确和快速是衡量全文检索系统的关键指标。</strong></p><p>关于全文检索，我们要知道：</p><p><strong>1. 只处理文本。</strong></p><p><strong>2. 不处理语义。</strong></p><p><strong>3. 搜索时英文不区分大小写。</strong></p><p><strong>4. 结果列表有相关度排序。</strong></p><h1 id="什么是Elastic-Search"><a href="#什么是Elastic-Search" class="headerlink" title="什么是Elastic Search"></a>什么是Elastic Search</h1><p><strong>ElasticSearch</strong> 简称 <strong>ES</strong> ，<strong>是基于Apache Lucene构建的开源搜索引擎，是当前流行的企业级搜索引擎</strong>。Lucene本身就可以被认为迄今为止性能最好的一款开源搜索引擎工具包，但是lucene的API相对复杂，需要深厚的搜索理论。很难集成到实际的应用中去。<strong>但是ES是采用java语言编写，提供了简单易用的RestFul API，开发者可以使用其简单的RestFul API，开发相关的搜索功能，从而避免lucene的复杂性</strong>。</p><h1 id="ES的诞生"><a href="#ES的诞生" class="headerlink" title="ES的诞生"></a>ES的诞生</h1><div class="note info no-icon flat"><p>多年前，一个叫做Shay Banon的刚结婚不久的失业开发者，由于妻子要去伦敦学习厨师，他便跟着也去了。在他找工作的过程中，为了给妻子构建一个食谱的搜索引擎，他开始构建一个早期版本的Lucene。</p><p>直接基于Lucene工作会比较困难，所以Shay开始抽象Lucene代码以便Java程序员可以在应用中添加搜索功能。他发布了他的第一个开源项目，叫做“Compass”。</p><p>后来Shay找到一份工作，这份工作处在高性能和内存数据网格的分布式环境中，因此高性能的、实时的、分布式的搜索引擎也是理所当然需要的。然后他决定重写Compass库使其成为一个独立的服务叫做Elasticsearch。</p><p>第一个公开版本出现在2010年2月，在那之后Elasticsearch已经成为Github上最受欢迎的项目之一，代码贡献者超过300人。一家主营Elasticsearch的公司就此成立，他们一边提供商业支持一边开发新功能，不过Elasticsearch将永远开源且对所有人可用。</p><p>Shay的妻子依旧等待着她的食谱搜索……</p></div><h1 id="ES的应用场景"><a href="#ES的应用场景" class="headerlink" title="ES的应用场景"></a>ES的应用场景</h1><p><strong>ES主要以轻量级JSON作为数据存储格式，这点与MongoDB有点类似，但它在读写性能上优于 MongoDB 。同时也支持地理位置查询 ，还方便地理位置和文本混合查询 。 以及在统计、日志类数据存储和分析、可视化这方面是引领者。</strong></p><ul><li><strong>国外:</strong> </li></ul><p>​    <strong>Wikipedia</strong>(维基百科)使用ES提供全文搜索并高亮关键字、<strong>StackOverflow</strong>(IT问答网站)结合全文搜索与地理位置查询、<strong>Github</strong>使用Elasticsearch检索1300亿行的代码。 </p><ul><li><strong>国内:</strong></li></ul><p><strong>百度</strong>(在云分析、网盟、预测、文库、钱包、风控等业务上都应用了ES，单集群每天导入30TB+数据， 总共每天60TB+)、<strong>新浪 、阿里巴巴、腾讯</strong>等公司均有对ES的使用。</p><p><strong>使用比较广泛的平台ELK(ElasticSearch, Logstash, Kibana)。</strong> </p><h1 id="ES中基本概念"><a href="#ES中基本概念" class="headerlink" title="ES中基本概念"></a>ES中基本概念</h1><h2 id="接近实时-NRT-Near-Real-Time"><a href="#接近实时-NRT-Near-Real-Time" class="headerlink" title="接近实时(NRT Near Real Time )"></a>接近实时(NRT Near Real Time )</h2><p><strong>Elasticsearch是一个接近实时的搜索平台</strong>。这意味着，<strong>从索引一个文档直到这个文档能够被搜索到有一个轻微的延迟(通常是1秒内)</strong> </p><h2 id="索引-index"><a href="#索引-index" class="headerlink" title="索引(index)"></a>索引(index)</h2><p><strong>一个索引就是一个拥有几分相似特征的文档的集合</strong>。比如说，你可以有一个客户数据的索引，另一个产品目录的索引，还有一个订单数据的索引。<strong>一个索引由一个名字来标识(必须全部是小写字母的)</strong>，<strong>并且当我们要对这个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字</strong>。<strong>索引类似于关系型数据库中Database 的概念</strong>。在一个集群中，如果你想，可以定义任意多的索引。 </p><h2 id="类型-type"><a href="#类型-type" class="headerlink" title="类型(type)"></a>类型(type)</h2><p><strong>在一个索引中，你可以定义一种或多种类型</strong>。一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数 据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可 以为评论数据定义另一个类型。<strong>类型类似于关系型数据库中Table的概念</strong>。 </p><p><strong>NOTE: 在5.x版本以前可以在一个索引中定义多个类型,6.x之后版本也可以使用,但是不推荐,在7~8.x版本中彻底移除一个索引中创建多个类型</strong></p><h2 id="映射-Mapping"><a href="#映射-Mapping" class="headerlink" title="映射(Mapping)"></a>映射(Mapping)</h2><p><strong>Mapping</strong>是ES中的一个很重要的内容，<strong>它类似于传统关系型数据中table的schema，用于定义一个索引(index)中的类型(type)的数据的结构</strong>。 在ES中，我们可以手动创建type(相当于table)和mapping(相关与schema),也可以采用默认创建方式。<strong>在默认配置下，ES可以根据插入的数据自动地创建type及其mapping。 mapping中主要包括字段名、字段数据类型和字段索引类型</strong> </p><h2 id="文档-document"><a href="#文档-document" class="headerlink" title="文档(document)"></a>文档(document)</h2><p><strong>一个文档是一个可被索引的基础信息单元，类似于表中的一条记录。</strong>比如，你可以拥有某一个员工的文档,也可以拥有某个商品的一个文档。文档以采用了轻量级的数据交换格式JSON(Javascript Object Notation)来表示。 </p><h2 id="概念关系图"><a href="#概念关系图" class="headerlink" title="概念关系图"></a>概念关系图</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20200701163807755.png" alt="概念关系图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是RestFul&quot;&gt;&lt;a href=&quot;#什么是RestFul&quot; class=&quot;headerlink&quot; title=&quot;什么是RestFul&quot;&gt;&lt;/a&gt;什么是RestFul&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;REST&lt;/strong&gt; : 表现层状态转化(Repres</summary>
      
    
    
    
    <category term="ElasticSearch" scheme="https://blog.just-null.cn/categories/ElasticSearch/"/>
    
    
    <category term="ElasticSearch" scheme="https://blog.just-null.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装ElasticSearch</title>
    <link href="https://blog.just-null.cn/posts/es_docker.html"/>
    <id>https://blog.just-null.cn/posts/es_docker.html</id>
    <published>2021-07-20T02:05:40.000Z</published>
    <updated>2021-07-20T02:10:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:版本号</span><br></pre></td></tr></table></figure><h1 id="查看docker镜像"><a href="#查看docker镜像" class="headerlink" title="查看docker镜像"></a>查看docker镜像</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721144936164.png" alt="查看docker镜像"></p><h1 id="创建网桥"><a href="#创建网桥" class="headerlink" title="创建网桥"></a>创建网桥</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create eswork</span><br></pre></td></tr></table></figure><h1 id="运行docker镜像"><a href="#运行docker镜像" class="headerlink" title="运行docker镜像"></a>运行docker镜像</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name elasticsearch --net eswork -p 9200:9200 -p 9300:9300 elasticsearch:6.8.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加-e <span class="string">&quot;discovery.type=single-node&quot;</span> 表示单节点启动</span></span><br></pre></td></tr></table></figure><h2 id="启动出现如下错误"><a href="#启动出现如下错误" class="headerlink" title="启动出现如下错误"></a>启动出现如下错误</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721150425255.png" alt="启动出现错误"></p><h2 id="解决错误"><a href="#解决错误" class="headerlink" title="解决错误"></a>解决错误</h2><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>在centos虚拟机中，修改配置sysctl.conf</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>加入如下配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vm.max_map_count=262144 </span><br></pre></td></tr></table></figure><p>启用配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h2 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h2><p>浏览器通过ip:9200访问，出现如下界面则安装成功</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721150730789.png" alt="安装成功界面"></p><h1 id="EleasticSearch持久化"><a href="#EleasticSearch持久化" class="headerlink" title="EleasticSearch持久化"></a>EleasticSearch持久化</h1><p>EleasticSearch数据在：<code>/usr/share/elasticsearch/data</code></p><p>EleasticSearch配置文件在：<code>/usr/share/elasticsearch/config</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name es -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=&quot;-Xms128m -Xmx128m&quot; -v esdata:/usr/share/elasticsearch/data -v esconfig:/usr/share/elasticsearch/config elasticsearch:6.8.0</span><br></pre></td></tr></table></figure><h1 id="安装IK分词器"><a href="#安装IK分词器" class="headerlink" title="安装IK分词器"></a>安装IK分词器</h1><h2 id="下载对应版本的IK分词器"><a href="#下载对应版本的IK分词器" class="headerlink" title="下载对应版本的IK分词器"></a>下载对应版本的IK分词器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.0/elasticsearch-analysis-ik-6.8.0.zip</span><br></pre></td></tr></table></figure><div class="note success simple"><p>如果使用功能wegt方式下载较慢。则可以使用浏览器访问<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.0/elasticsearch-analysis-ik-6.8.0.zip直接下载">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.8.0/elasticsearch-analysis-ik-6.8.0.zip直接下载</a></p></div><p>因为es的扩展插件默认在es内部的<code>/usr/share/elasticsearch/plugins</code>目录下，所以需要在启动时候挂载出来</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name es -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=&quot;-Xms128m -Xmx128m&quot; -v esdata:/usr/share/elasticsearch/data -v esconfig:/usr/share/elasticsearch/config -v  esplugins:/usr/share/elasticsearch/plugins elasticsearch:6.8.0</span><br></pre></td></tr></table></figure><p>启动之后将下载出来的插件移动到<code>/var/lib/docker/volumes/esplugins/_data</code>目录下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv elasticsearch-analysis-ik-6.8.0.zip /var/lib/docker/volumes/esplugins/_data</span><br></pre></td></tr></table></figure><p>进入<code>/var/lib/docker/volumes/esplugins/_data</code>目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/lib/docker/volumes/esplugins/_data</span><br></pre></td></tr></table></figure><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y unzip</span><br><span class="line">unzip -d ik elasticsearch-analysis-ik-6.8.0.zip</span><br></pre></td></tr></table></figure><h2 id="重启elasticsearch"><a href="#重启elasticsearch" class="headerlink" title="重启elasticsearch"></a>重启elasticsearch</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker restart 容器id</span><br></pre></td></tr></table></figure><h2 id="查了启动日志"><a href="#查了启动日志" class="headerlink" title="查了启动日志"></a>查了启动日志</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs 容器id</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721153509823.png" alt="启动日志"></p><h1 id="安装Kibana"><a href="#安装Kibana" class="headerlink" title="安装Kibana"></a>安装Kibana</h1><h2 id="下载kibana镜像到本地"><a href="#下载kibana镜像到本地" class="headerlink" title="下载kibana镜像到本地"></a>下载kibana镜像到本地</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull kibana:6.8.0</span><br></pre></td></tr></table></figure><h2 id="启动kibana容器并连接es服务"><a href="#启动kibana容器并连接es服务" class="headerlink" title="启动kibana容器并连接es服务"></a>启动kibana容器并连接es服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name kibana --net eswork -e ELASTICSEARCH_URL=http://10.211.55.5:9200 -p 5601:5601 kibana:6.8.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7.x版本</span><br><span class="line">docker run -d --name kibana --net eswork -e ELASTICSEARCH_HOST=http://10.211.55.5:9200 -p 5601:5601 kibana:7.x</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>浏览器访问ip:5601</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721154820169.png" alt="浏览器访问"></p><p>点击Tyr our sample data</p><p>选择Dev Tools，就行测试</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">PUT /video/video/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;title&quot;:&quot;测试&quot;,</span><br><span class="line">  &quot;cover&quot;:&quot;http://www/baidu.com&quot;,</span><br><span class="line">  &quot;likes&quot;:20,</span><br><span class="line">  &quot;uploader&quot;:&quot;Just&quot;,</span><br><span class="line">  &quot;created_at&quot;:&quot;2021-07-21&quot;</span><br><span class="line">&#125;</span><br><span class="line">GET /video/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;title&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;测&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721155503593.png" alt=""></p><h2 id="额外配置"><a href="#额外配置" class="headerlink" title="额外配置"></a>额外配置</h2><p>让Kibana加载配置文件启动，不必要每次启动都要加ELASTICSEARCH_HOST=<a href="http://10.211.55.5:9200参数">http://10.211.55.5:9200参数</a></p><p>Kibana配置文件在<code>/usr/share/kibana/config</code></p><p>先停止Kibana</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop 容器id</span><br><span class="line">docker rm -f 容器id</span><br></pre></td></tr></table></figure><p>将配置文件挂载出去</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name kibana --net eswork -v kibanaconf:/usr/share/kibana/config -p 5601:5601 kibana:6.8.0</span><br></pre></td></tr></table></figure><p>进入挂载出来的配置文件所在的路径</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/lib/docker/volumes/kibanaconf/_data</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/image-20210721160446354.png" alt=""></p><p>修改为自己机器的IP，之后重启kibana</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;拉取镜像&quot;&gt;&lt;a href=&quot;#拉取镜像&quot; class=&quot;headerlink&quot; title=&quot;拉取镜像&quot;&gt;&lt;/a&gt;拉取镜像&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    <category term="ElasticSearch" scheme="https://blog.just-null.cn/categories/ElasticSearch/"/>
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/tags/Docker/"/>
    
    <category term="ElasticSearch" scheme="https://blog.just-null.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose安装与使用</title>
    <link href="https://blog.just-null.cn/posts/docker_compose.html"/>
    <id>https://blog.just-null.cn/posts/docker_compose.html</id>
    <published>2021-07-19T02:07:40.000Z</published>
    <updated>2021-07-19T02:11:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 <code>OpenStack</code> 中的 <code>Heat</code> 十分类似。</p><p>其代码目前在 <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 上开源。</p><p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p><p>使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p><code>Compose</code> 中有两个重要的概念：</p><ul><li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li></ul><p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p><h1 id="安装与卸载"><a href="#安装与卸载" class="headerlink" title="安装与卸载"></a>安装与卸载</h1><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><ul><li>在 Linux 上的也安装十分简单，从 官方 GitHub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64 位系统上直接下载对应的二进制包。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果使用curl下载的方式比较慢，则可以先在本地上下载之后上传到虚拟机（服务器）的<code>/usr/local/bin</code>文件夹，并重命名为docker-compose</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719113326044.png" alt=""></p><p>设置权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="macos、window"><a href="#macos、window" class="headerlink" title="macos、window"></a>macos、window</h2><ul><li>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。<code>Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用</code>。</li></ul><h2 id="bash命令补全"><a href="#bash命令补全" class="headerlink" title="bash命令补全"></a>bash命令补全</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -L https://raw.githubusercontent.com/docker/compose/1.25.5/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><ul><li>如果是二进制包方式安装的，删除二进制文件即可。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="测试安装是否成功"><a href="#测试安装是否成功" class="headerlink" title="测试安装是否成功"></a>测试安装是否成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker-compose --version</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719113352396.png" alt="测试"></p><h1 id="docker-compose使用"><a href="#docker-compose使用" class="headerlink" title="docker compose使用"></a>docker compose使用</h1><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>首先介绍几个术语。</p><ul><li>服务 (<code>service</code>)：一个应用容器，实际上可以运行多个相同镜像的实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元。∂一个项目可以由多个服务（容器）关联而成，<code>Compose</code> 面向项目进行管理。</li></ul><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。</p><ul><li>springboot应用</li><li>mysql服务</li><li>redis服务</li><li>elasticsearch服务</li><li>…….</li></ul><h2 id="docker-compose模板"><a href="#docker-compose模板" class="headerlink" title="docker-compose模板"></a>docker-compose模板</h2><p>参考文档:<a href="https://docker_practice.gitee.io/zh-cn/compose/compose_file.html">https://docker_practice.gitee.io/zh-cn/compose/compose_file.html</a></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.0&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysqldb:</span> <span class="comment">#服务</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7.19</span> <span class="comment">#镜像名称</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span> <span class="comment">#指定容器名称</span></span><br><span class="line">    <span class="attr">ports:</span> <span class="comment">#对外暴露端口号：宿主机：容器</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span> <span class="comment"># 指定容器与宿主机目录进行数据卷映射</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/conf:/etc/mysql/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/logs:/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/mysql/data:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span> <span class="comment">#用来给容器中的某些环境进行赋值</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="comment">#指定自定义网桥</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ems</span></span><br><span class="line">    <span class="attr">depends_on:</span> <span class="comment">#解决容器的依赖、启动先后的问题</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:4.0.14</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ems</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/root/redis/data:/data</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">ems:</span></span><br></pre></td></tr></table></figure><h2 id="通过docker-compose运行一组容器"><a href="#通过docker-compose运行一组容器" class="headerlink" title="通过docker-compose运行一组容器"></a>通过docker-compose运行一组容器</h2><ul><li>参考文档:<a href="https://docker_practice.gitee.io/zh-cn/compose/commands.html">https://docker_practice.gitee.io/zh-cn/compose/commands.html</a></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@centos ~]<span class="comment"># docker-compose up    //前台启动一组服务</span></span><br><span class="line">[root@centos ~]<span class="comment"># docker-compose up -d //后台启动一组服务</span></span><br></pre></td></tr></table></figure><h2 id="docker-compose-模板文件"><a href="#docker-compose-模板文件" class="headerlink" title="docker-compose 模板文件"></a>docker-compose 模板文件</h2><p>模板文件是使用 <code>Compose</code> 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。</p><p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">examples/web</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/data&quot;</span></span><br></pre></td></tr></table></figure><p>注意每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</p><p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置。</p><p>下面分别介绍各个指令的用法。</p><h3 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h3><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它<code>自动构建</code>这个镜像，然后使用（运行）这个镜像。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./dir</span></span><br></pre></td></tr></table></figure><p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p><p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p><p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webapp:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./dir</span> </span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">buildno:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="command"><a href="#command" class="headerlink" title="command"></a><code>command</code></h3><p>覆盖容器启动后默认执行的命令。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><h3 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a><code>container_name</code></h3><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p></div><h3 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a><code>depends_on</code></h3><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">.</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span>  <span class="comment">#写的是服务名，不是容器名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">postgres</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p></div><h3 id="environment"><a href="#environment" class="headerlink" title="environment"></a><code>environment</code></h3><p>设置环境变量。你可以使用数组或字典两种格式。</p><p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br></pre></td></tr></table></figure><p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href="https://yaml.org/type/bool.html">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">y|Y|yes|Yes|YES|n|N|no|No|NO|<span class="literal">true</span>|True|TRUE|<span class="literal">false</span>|False|FALSE|on|On|ON|off|Off|OFF</span><br></pre></td></tr></table></figure><h3 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a><code>env_file</code></h3><p>用来将<code>environment</code>环境中配置的环境变量放入指定的配置文件（如mysql启动时候指定的密码），从文件中获取环境变量，可以为单独的文件路径或列表。</p><p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p><p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env_file:</span> <span class="comment">#路径可以为绝对路径，也可以是相对路径</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./common.env</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">./apps/web.env</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/opt/secrets.env</span></span><br></pre></td></tr></table></figure><p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># common.env: Set development environment</span></span><br><span class="line">PROG_ENV=development</span><br><span class="line">MYSQL_ROOT_PASSWORD: password</span><br></pre></td></tr></table></figure><h3 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a><code>healthcheck</code></h3><p>通过命令检查容器是否健康运行。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span></span><br><span class="line">  <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-f&quot;</span>, <span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">  <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">retries:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="image"><a href="#image" class="headerlink" title="image"></a><code>image</code></h3><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">orchardup/postgresql</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">a4bc65fd</span></span><br></pre></td></tr></table></figure><h3 id="networks"><a href="#networks" class="headerlink" title="networks"></a><code>networks</code></h3><p>配置容器连接的网络。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">some-service:</span></span><br><span class="line">    <span class="attr">networks:</span> <span class="comment">#使用自定义的网桥</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">some-network</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">other-network</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span> <span class="comment">#定义上面服务用到的桥，默认创建的就是bridge</span></span><br><span class="line">  <span class="attr">some-network:</span></span><br><span class="line">  <span class="attr">other-network:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="comment">#使用自定义网桥</span></span><br><span class="line">  <span class="literal">true</span>  <span class="comment">#true 确定使用自定义网桥，注意，如果使用外部自定义网桥，则需要在容器启动前先手动创建卷名</span></span><br></pre></td></tr></table></figure><h3 id="ports"><a href="#ports" class="headerlink" title="ports"></a><code>ports</code></h3><p>暴露端口信息。</p><p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;49100:22&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:8001:8001&quot;</span></span><br></pre></td></tr></table></figure><p><em>注意：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 <code>YAML</code> 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</em></p><h3 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a><code>sysctls</code></h3><p>配置容器内核参数。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sysctls:</span> <span class="comment">#方式1</span></span><br><span class="line">  <span class="attr">net.core.somaxconn:</span> <span class="number">1024</span></span><br><span class="line">  <span class="attr">net.ipv4.tcp_syncookies:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sysctls:</span> <span class="comment">#方式2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.core.somaxconn=1024</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">net.ipv4.tcp_syncookies=0</span></span><br></pre></td></tr></table></figure><h3 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a><code>ulimits</code></h3><p>指定容器的 ulimits 限制值。</p><p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line">  <span class="attr">nproc:</span> <span class="number">65535</span></span><br><span class="line">  <span class="attr">nofile:</span></span><br><span class="line">    <span class="attr">soft:</span> <span class="number">20000</span></span><br><span class="line">    <span class="attr">hard:</span> <span class="number">40000</span></span><br></pre></td></tr></table></figure><h3 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a><code>volumes</code></h3><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p><p>该指令中路径支持相对路径。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">cache:/tmp/cache</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br></pre></td></tr></table></figure><p>如果路径为数据卷名称，必须在文件中配置数据卷。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">my_src:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8.0</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql_data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">mysql_data:</span></span><br><span class="line">  <span class="attr">external:</span> <span class="comment">#使用自定义卷名</span></span><br><span class="line">  <span class="literal">true</span>  <span class="comment">#true 确定使用自定义外部卷名，注意，如果使用外部自定义卷名，则需要在容器启动前先手动创建卷名</span></span><br></pre></td></tr></table></figure><h2 id="docker-compose-常用命令"><a href="#docker-compose-常用命令" class="headerlink" title="docker-compose 常用命令"></a>docker-compose 常用命令</h2><h3 id="命令对象与格式"><a href="#命令对象与格式" class="headerlink" title="命令对象与格式"></a>命令对象与格式</h3><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p><p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p><p><code>docker-compose</code> 命令的基本的使用格式是</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br></pre></td></tr></table></figure><h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3><ul><li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li><li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li><li><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</li><li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为 <code>bridge</code></li><li><code>--verbose</code> 输出更多调试信息。</li><li><code>-v, --version</code> 打印版本并退出。</li></ul><h3 id="命令使用说明"><a href="#命令使用说明" class="headerlink" title="命令使用说明"></a>命令使用说明</h3><h4 id="up"><a href="#up" class="headerlink" title="up"></a><code>up</code></h4><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><ul><li><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p></li><li><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p></li><li><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p></li><li><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p></li><li><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p></li><li><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p></li><li><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</p></li></ul><h4 id="down"><a href="#down" class="headerlink" title="down"></a><code>down</code></h4><ul><li>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络，但不会移除数据卷</li></ul><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h4><ul><li>进入指定的容器。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose <span class="built_in">exec</span> 服务id（非容器id）</span><br></pre></td></tr></table></figure><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a><code>ps</code></h4><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。</p><p>选项：</p><ul><li><code>-q</code> 只打印容器的 ID 信息。</li></ul><h4 id="restart"><a href="#restart" class="headerlink" title="restart"></a><code>restart</code></h4><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h4><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><h4 id="start"><a href="#start" class="headerlink" title="start"></a><code>start</code></h4><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><h4 id="stop"><a href="#stop" class="headerlink" title="stop"></a><code>stop</code></h4><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><h4 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h4><p>查看各个服务容器内运行的进程。</p><h4 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a><code>unpause</code></h4><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p><p>恢复处于暂停状态中的服务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Compose&lt;/code&gt; 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟</summary>
      
    
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker可视化工具安装</title>
    <link href="https://blog.just-null.cn/posts/docker_utils.html"/>
    <id>https://blog.just-null.cn/posts/docker_utils.html</id>
    <published>2021-07-18T03:05:40.000Z</published>
    <updated>2021-07-18T03:10:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h1><p>官方安装说明：<a href="https://www.portainer.io/installation/">https://www.portainer.io/installation/</a></p><h1 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull  portainer/portainer</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719110244129.png" alt="拉取镜像"></p><h1 id="手动创建数据卷"><a href="#手动创建数据卷" class="headerlink" title="手动创建数据卷"></a>手动创建数据卷</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create portainer_data</span><br></pre></td></tr></table></figure><h1 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719110418441.png" alt="启动容器"></p><h1 id="登录和使用Portainer"><a href="#登录和使用Portainer" class="headerlink" title="登录和使用Portainer"></a>登录和使用Portainer</h1><p>本地使用虚拟机（服务器）ip:9000访问</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719110533672.png" alt="访问"></p><p>初次使用需要设置用户名和密码（密码长度需要大于等于8位）</p><p>因为启动docker时候使用本地文件作为映射，所以启动时候采用Local进行使用</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719110810477.png" alt="Local"></p><p>首页可以看到本地的docker</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719110926656.png" alt="本地的docker"></p><p>点击进去可以看到具体信息</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719111044030.png" alt="具体信息"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Portainer&quot;&gt;&lt;a href=&quot;#Portainer&quot; class=&quot;headerlink&quot; title=&quot;Portainer&quot;&gt;&lt;/a&gt;Portainer&lt;/h1&gt;&lt;p&gt;官方安装说明：&lt;a href=&quot;https://www.portainer.io/i</summary>
      
    
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile介绍与使用</title>
    <link href="https://blog.just-null.cn/posts/docker_dockerfile.html"/>
    <id>https://blog.just-null.cn/posts/docker_dockerfile.html</id>
    <published>2021-07-18T02:05:40.000Z</published>
    <updated>2021-07-18T02:10:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Dockerfile"><a href="#什么是Dockerfile" class="headerlink" title="什么是Dockerfile"></a>什么是Dockerfile</h1><div class="note info no-icon flat"><p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件，DockerFile可以直接构建镜像</strong></p></div><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20200404111908085.png" alt="Dockerfile"></p><h1 id="为什么要使用Dockerfile"><a href="#为什么要使用Dockerfile" class="headerlink" title="为什么要使用Dockerfile"></a>为什么要使用Dockerfile</h1><div class="note success simple"><p>问题:在dockerhub中官方提供很多镜像已经能满足我们的所有服务了,为什么还需要自定义镜像？<br>核心作用:日后用户可以将自己应用打包成镜像,这样就可以让我们应用进行容器运行</p></div><h1 id="Dockerfile解析过程"><a href="#Dockerfile解析过程" class="headerlink" title="Dockerfile解析过程"></a>Dockerfile解析过程</h1><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20200603181253804.png" alt="Dockerfile解析过程"></p><h1 id="Dockerfile的保留命令"><a href="#Dockerfile的保留命令" class="headerlink" title="Dockerfile的保留命令"></a>Dockerfile的保留命令</h1><p>官方说明:<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><div class="table-container"><table><thead><tr><th>保留字</th><th>作用</th></tr></thead><tbody><tr><td><strong>FROM</strong></td><td><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td></tr><tr><td><strong>RUN</strong></td><td><strong>构建镜像时需要运行的指令</strong></td></tr><tr><td><strong>EXPOSE</strong></td><td><strong>当前容器对外暴露出的端口号</strong></td></tr><tr><td><strong>WORKDIR</strong></td><td><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td></tr><tr><td><strong>ENV</strong></td><td><strong>用来在构建镜像过程中设置环境变量</strong></td></tr><tr><td><strong>ADD</strong></td><td><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td></tr><tr><td><strong>COPY</strong></td><td><strong>类似于ADD，拷贝文件和目录到镜像中<br/>将从构建上下文目录中&lt;原路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td></tr><tr><td><strong>VOLUME</strong></td><td><strong>容器数据卷，用于数据保存和持久化工作</strong></td></tr><tr><td><strong>CMD</strong></td><td><strong>指定一个容器启动时要运行的命令<br/>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td></tr><tr><td><strong>ENTRYPOINT</strong></td><td><strong>指定一个容器启动时要运行的命令<br/>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td></tr></tbody></table></div><h2 id="FROM-命令"><a href="#FROM-命令" class="headerlink" title="FROM 命令"></a>FROM 命令</h2><ul><li><p>基于那个镜像进行构建新的镜像,在构建时会<code>自动</code>从docker hub拉取base镜像 必须作为Dockerfile的第一个指令出现</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;</span><br><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;[:&lt;tag&gt;]     使用版本不写为latest</span><br><span class="line"><span class="keyword">FROM</span>  &lt;image&gt;[@&lt;digest&gt;]  使用摘要</span><br></pre></td></tr></table></figure><h2 id="RUN-命令"><a href="#RUN-命令" class="headerlink" title="RUN 命令"></a>RUN 命令</h2></li><li><p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;<span class="built_in">command</span>&gt; (shell form, the <span class="built_in">command</span> is run <span class="keyword">in</span> a shell, <span class="built_in">which</span> by default is /bin/sh -c on Linux or cmd /S /C on Windows)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>] (<span class="built_in">exec</span> form)</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;echo hello&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="EXPOSE-命令"><a href="#EXPOSE-命令" class="headerlink" title="EXPOSE 命令"></a>EXPOSE 命令</h2></li><li><p>用来指定构建的镜像在运行为容器时对外暴露的端口</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/tcp  如果没有显示指定则默认暴露都是tcp</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span>/udp</span><br></pre></td></tr></table></figure><h2 id="CMD-命令"><a href="#CMD-命令" class="headerlink" title="CMD 命令"></a>CMD 命令</h2></li><li><p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。(会被docker run命令后指定的命令所覆盖)</p></li><li><p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>,<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (<span class="built_in">exec</span> form, this is the preferred form)</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;param1&quot;</span>,<span class="string">&quot;param2&quot;</span>] (as default parameters to ENTRYPOINT)</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">command</span> param1 param2 (shell form)</span></span><br></pre></td></tr></table></figure><h2 id="WORKDIR-命令"><a href="#WORKDIR-命令" class="headerlink" title="WORKDIR 命令"></a>WORKDIR 命令</h2></li><li><p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /path/to/workdir</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /a</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> b</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> c</span></span><br><span class="line">`注意:<span class="keyword">WORKDIR</span><span class="bash">指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对`</span></span><br></pre></td></tr></table></figure><h2 id="ENV-命令"><a href="#ENV-命令" class="headerlink" title="ENV 命令"></a>ENV 命令</h2></li><li><p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p></li><li><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ENV</span> &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...</span><br></pre></td></tr></table></figure><h2 id="ADD-命令"><a href="#ADD-命令" class="headerlink" title="ADD 命令"></a>ADD 命令</h2></li><li><p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="bash"> hom* /mydir/       通配符添加多个文件</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> hom?.txt /mydir/   通配符添加</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> test.txt relativeDir/  可以指定相对路径</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> test.txt /absoluteDir/ 也可以指定绝对路径</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> url </span></span><br></pre></td></tr></table></figure><h2 id="COPY-命令"><a href="#COPY-命令" class="headerlink" title="COPY 命令"></a>COPY 命令</h2></li><li><p>用来将context目录中指定文件复制到镜像的指定目录中</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> src dest</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> [<span class="string">&quot;&lt;src&gt;&quot;</span>,... <span class="string">&quot;&lt;dest&gt;&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="VOLUME-命令"><a href="#VOLUME-命令" class="headerlink" title="VOLUME 命令"></a>VOLUME 命令</h2></li><li><p>用来定义容器运行时可以挂在到宿主机的目录</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="bash"> [<span class="string">&quot;/data&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="ENTRYPOINT命令"><a href="#ENTRYPOINT命令" class="headerlink" title="ENTRYPOINT命令"></a>ENTRYPOINT命令</h2></li><li><p>用来指定容器启动时执行命令和CMD类似（默认不会被启动时候指定的参数覆盖，如果需要覆盖，则需要在启动时候加上—entrypoint=’命令类型（ls、cd、tial）等等的命令’）。</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">  [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]</span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">command</span> param1 param2</span></span><br></pre></td></tr></table></figure><p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br>CMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p></li></ul><h1 id="Dockerfile构建springboot项目部署"><a href="#Dockerfile构建springboot项目部署" class="headerlink" title="Dockerfile构建springboot项目部署"></a>Dockerfile构建springboot项目部署</h1><h2 id="准备springboot可运行项目"><a href="#准备springboot可运行项目" class="headerlink" title="准备springboot可运行项目"></a>准备springboot可运行项目</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210721103236702.png" alt="创建项目"></p><h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="application-properties文件"><a href="#application-properties文件" class="headerlink" title="application.properties文件"></a>application.properties文件</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">9090</span></span><br></pre></td></tr></table></figure><h3 id="创建Controller层"><a href="#创建Controller层" class="headerlink" title="创建Controller层"></a>创建Controller层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.docker.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Docker&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Maven工具打包"><a href="#使用Maven工具打包" class="headerlink" title="使用Maven工具打包"></a>使用Maven工具打包</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210721104136433.png" alt="使用Maven工具打包"></p><h2 id="在Linux中创建一个Test目录"><a href="#在Linux中创建一个Test目录" class="headerlink" title="在Linux中创建一个Test目录"></a>在Linux中创建一个Test目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir Test</span><br></pre></td></tr></table></figure><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>将Jar包上传到Linux中的Test目录中</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210721110704175.png" alt="将Jar包上传到Linux中的Test目录中"></p><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title="编写Dockerfile"></a>编写Dockerfile</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch Dockerfile</span><br></pre></td></tr></table></figure><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>  <span class="comment">#构建时候所需的镜像</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app <span class="comment">#设置工作目录为app</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> docker-0.0.1-SNAPSHOT.jar app.jar <span class="comment">#将docker添加到app目录中，并命名为app.jar</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9090</span> <span class="comment">#指定对外暴露的端口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;docker.jar&quot;</span>] <span class="comment">#容器启动时执行命令</span></span></span><br></pre></td></tr></table></figure><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t test:01 . #构建当前目录中的内容为test，版本号为01</span><br></pre></td></tr></table></figure><h2 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210721111924933.png" alt="查看镜像"></p><h2 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 9090:9090 test:01</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210721111958981.png" alt="运行镜像"></p><h2 id="访问项目"><a href="#访问项目" class="headerlink" title="访问项目"></a>访问项目</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">http://ip:9090/test</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210721112033901.png" alt="访问项目"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是Dockerfile&quot;&gt;&lt;a href=&quot;#什么是Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;什么是Dockerfile&quot;&gt;&lt;/a&gt;什么是Dockerfile&lt;/h1&gt;&lt;div class=&quot;note info no-icon</summary>
      
    
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/tags/Docker/"/>
    
    <category term="Dockerfile" scheme="https://blog.just-null.cn/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Docker数据卷配置</title>
    <link href="https://blog.just-null.cn/posts/docker_volume.html"/>
    <id>https://blog.just-null.cn/posts/docker_volume.html</id>
    <published>2021-07-18T01:31:40.000Z</published>
    <updated>2021-07-18T01:51:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据卷的作用"><a href="#数据卷的作用" class="headerlink" title="数据卷的作用"></a>数据卷的作用</h1><p>用来实现容器与宿主机之间数据共享</p><h1 id="数据卷的特点"><a href="#数据卷的特点" class="headerlink" title="数据卷的特点"></a>数据卷的特点</h1><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><div class="note info no-icon flat"><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p></div><h1 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h1><p>使用一个命令创建一个数据卷</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume create 数据卷名称</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718183909869.png" alt="创建数据卷"></p><h1 id="列出数据卷"><a href="#列出数据卷" class="headerlink" title="列出数据卷"></a>列出数据卷</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718184658853.png" alt="列出数据卷"></p><h1 id="查看数据卷"><a href="#查看数据卷" class="headerlink" title="查看数据卷"></a>查看数据卷</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718183923362.png" alt="查看数据卷"></p><h1 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h1><p>在容器启动时候，可以使用<code>-v</code>命令挂在数据卷</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8081:8080 --name tomcat01 -v 数据卷名称:/usr/<span class="built_in">local</span>/tomcat/webapps 镜像名</span><br><span class="line">docker run -d -p 8081:8080 --name tomcat01 -v 数据卷名称:/usr/<span class="built_in">local</span>/tomcat/webapps:ro 镜像名</span><br><span class="line"><span class="comment"># ro代表容器内目录权限为只读</span></span><br></pre></td></tr></table></figure><h1 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker volume rm 数据卷名称</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据卷的作用&quot;&gt;&lt;a href=&quot;#数据卷的作用&quot; class=&quot;headerlink&quot; title=&quot;数据卷的作用&quot;&gt;&lt;/a&gt;数据卷的作用&lt;/h1&gt;&lt;p&gt;用来实现容器与宿主机之间数据共享&lt;/p&gt;
&lt;h1 id=&quot;数据卷的特点&quot;&gt;&lt;a href=&quot;#数据卷的特点&quot;</summary>
      
    
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker网络配置</title>
    <link href="https://blog.just-null.cn/posts/docker_network.html"/>
    <id>https://blog.just-null.cn/posts/docker_network.html</id>
    <published>2021-07-18T01:30:40.000Z</published>
    <updated>2021-07-18T01:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>当 Docker 启动时，会自动 在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p><p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href="https://tools.ietf.org/html/rfc1918">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p><p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20201125105847896.png" alt=""></p><h1 id="可能产生的问题"><a href="#可能产生的问题" class="headerlink" title="可能产生的问题"></a>可能产生的问题</h1><p>由于在启动容器时候，Docker会默认创建一个网桥，那么所有启动的容器都会运行在这个网桥中，此时，如果某一个容器频繁的进行数据传输，会对其他容器的带宽造成影响，所以在开发过程中，应该基于应用去构建对应的网桥，所以应该需要手动的创建一个自定义的网桥</p><h1 id="创建自定义网桥"><a href="#创建自定义网桥" class="headerlink" title="创建自定义网桥"></a>创建自定义网桥</h1><h2 id="查看网络信息"><a href="#查看网络信息" class="headerlink" title="查看网络信息"></a>查看网络信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718181615497.png" alt="查看网络信息"></p><h2 id="创建一个网桥"><a href="#创建一个网桥" class="headerlink" title="创建一个网桥"></a>创建一个网桥</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create -d bridge 网桥名称 <span class="comment"># -------复杂写法</span></span><br><span class="line">docker network create 网桥名称 <span class="comment"># -------简单写法</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718181922365.png" alt="创建一个网桥"></p><h2 id="删除一个网桥"><a href="#删除一个网桥" class="headerlink" title="删除一个网桥"></a>删除一个网桥</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network rm 网桥名称</span><br></pre></td></tr></table></figure><h2 id="启动容器指定使用网桥"><a href="#启动容器指定使用网桥" class="headerlink" title="启动容器指定使用网桥"></a>启动容器指定使用网桥</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 宿主机端口号:容器的口红啊 --name 自定义容器名称 --network 网桥名字 镜像名</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718182629667.png" alt="启动容器指定使用网桥"></p><h2 id="查看网桥的细节"><a href="#查看网桥的细节" class="headerlink" title="查看网桥的细节"></a>查看网桥的细节</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect 网桥名字</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718182849476.png" alt="查看网桥的细节"></p><div class="note success simple"><p>一旦在启动容器时指定了网桥之后，日后可以在任何这个网桥关联的容器中使用容器名字进行与其他容器通信.</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;当 Docker 启动时，会自动 在主机上创建一个 &lt;code&gt;docker0&lt;/code&gt; 虚拟网桥，实际上是 Linux 的一个 bri</summary>
      
    
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/categories/Docker/"/>
    
    <category term="CentOS" scheme="https://blog.just-null.cn/categories/Docker/CentOS/"/>
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/tags/Docker/"/>
    
    <category term="CentOS" scheme="https://blog.just-null.cn/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装常用服务</title>
    <link href="https://blog.just-null.cn/posts/docker_service.html"/>
    <id>https://blog.just-null.cn/posts/docker_service.html</id>
    <published>2021-07-18T01:09:40.000Z</published>
    <updated>2021-07-18T01:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在安装服务之前，可以去<a href="https://hub.docker.com/">Docker Hub</a>网站上查看版本信息，以mysql8例，直接搜索mysql</p><p>找到官方发布的版本（带有OFFICIAL IMAGE）</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718151729952.png" alt="官方发布的版本"></p><p>点击进去<code>tag</code>查看版本信息</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718151641646.png" alt="Docker Hub"></p><p>版本信息</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718151912951.png" alt="版本信息"></p><h1 id="安装Mysql服务"><a href="#安装Mysql服务" class="headerlink" title="安装Mysql服务"></a>安装Mysql服务</h1><h2 id="拉取mysql镜像到本地"><a href="#拉取mysql镜像到本地" class="headerlink" title="拉取mysql镜像到本地"></a>拉取mysql镜像到本地</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql:tag (tag不加默认最新版本)</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718152219466.png" alt="拉取mysql镜像到本地"></p><h2 id="启动mysql服务"><a href="#启动mysql服务" class="headerlink" title="启动mysql服务"></a>启动mysql服务</h2><h3 id="基本启动mysql服务"><a href="#基本启动mysql服务" class="headerlink" title="基本启动mysql服务"></a>基本启动mysql服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -e MYSQL_ROOT_PASSWORD=root mysql:tag</span><br><span class="line"><span class="comment"># -e MYSQL_ROOT_PASSWORD=root 代表给root用户指定密码，密码为root</span></span><br><span class="line"><span class="comment"># -name 指定容器名字为mysql</span></span><br><span class="line"><span class="comment"># tag 版本号</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718154018592.png" alt="基本启动"></p><h3 id="对外暴露接口启动"><a href="#对外暴露接口启动" class="headerlink" title="对外暴露接口启动"></a>对外暴露接口启动</h3><p>启动一个mysql服务、后台运行、指定容器名字、对外暴露端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root mysql:tag</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718154552578.png" alt=""></p><p>在本地可以访问</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718155725811.png" alt="本地访问"></p><h3 id="持久化数据启动"><a href="#持久化数据启动" class="headerlink" title="持久化数据启动"></a>持久化数据启动</h3><p>启动一个mysql服务、后台运行、指定容器名字、对外暴露端口，使用数据卷将数据持久化到宿主机系统</p><p>删除已经启动的容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop 容器id</span><br><span class="line">docker rm -f 容器id</span><br></pre></td></tr></table></figure><p>启动</p><font color="red">通过docker hub得知，mysql存储数据文件的目录为/var/lib/mysql</font><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -v mydata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:tag</span><br><span class="line"><span class="comment">#mydata 别名，使用别名的方式会默认在/var/lib/docker/volumes/路径下创建一个别名文件夹</span></span><br></pre></td></tr></table></figure><p>先创建一个数据表用于测试</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718160059520.png" alt="创建一个数据表"></p><p>查看数据文件</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718161503733.png" alt="查看数据文件"></p><p>删除已经启动的容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop 容器id</span><br><span class="line">docker rm -f 容器id</span><br></pre></td></tr></table></figure><p>再次启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -v mydata:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:tag</span><br><span class="line"><span class="comment">#mydata 别名，使用别名的方式会默认在/var/lib/docker/volumes/路径下创建一个别名文件夹</span></span><br></pre></td></tr></table></figure><p>在本地重新链接数据库查看数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718161701057.png" alt="数据库文件"></p><div class="note success simple"><p>数据依然存在</p></div><h3 id="持久化数据文件启动"><a href="#持久化数据文件启动" class="headerlink" title="持久化数据文件启动"></a>持久化数据文件启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mysql -v mydata:/var/lib/mysql -v myconfig:/etc/mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:tag</span><br><span class="line"><span class="comment">#mydata 别名，使用别名的方式会默认在/var/lib/docker/volumes/路径下创建一个别名文件夹</span></span><br><span class="line"><span class="comment">#docker中创建的mysql的配置文件在/etc/mysql文件下</span></span><br></pre></td></tr></table></figure><h1 id="安装Redis服务"><a href="#安装Redis服务" class="headerlink" title="安装Redis服务"></a>安装Redis服务</h1><h2 id="在docker-hub搜索redis镜像"><a href="#在docker-hub搜索redis镜像" class="headerlink" title="在docker hub搜索redis镜像"></a>在docker hub搜索redis镜像</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718164454734.png" alt="搜索redis镜像"></p><h2 id="拉取redis镜像到本地"><a href="#拉取redis镜像到本地" class="headerlink" title="拉取redis镜像到本地"></a>拉取redis镜像到本地</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull redis:tar</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718164659443.png" alt="拉取redis镜像到本地"></p><h2 id="启动redis服务运行容器"><a href="#启动redis服务运行容器" class="headerlink" title="启动redis服务运行容器"></a>启动redis服务运行容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name redis -d redis:tag (没有暴露外部端口)</span><br><span class="line">docker run --name redis -p 6379:6379 -d redis:tag (暴露外部宿主机端口为6379进行连接) </span><br></pre></td></tr></table></figure><p>本地连接</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718164905576.png" alt="本地连接"></p><h2 id="开启redis持久化"><a href="#开启redis持久化" class="headerlink" title="开启redis持久化"></a>开启redis持久化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name redis -p 6379:6379 -d -v redisdata:/data redis:tag redis-server --appendonly yes</span><br><span class="line"><span class="comment">#注意： 一旦开启持久化之后，持久化生成的aof文件会被放入容器中的data目录</span></span><br></pre></td></tr></table></figure><p>在本地向redis中添加数据</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718170246708.png" alt="添加数据"></p><p>前往<code>/var/lib/docker/volumes/redisdata</code>文件夹中查看</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718170440499.png" alt="查看数据"></p><h2 id="以配置文件方式启动"><a href="#以配置文件方式启动" class="headerlink" title="以配置文件方式启动"></a>以配置文件方式启动</h2><p>默认情况下redis官方镜像中没有redis.conf配置文件 需要去官网下载指定版本的配置文件</p><h3 id="下载官方安装包"><a href="#下载官方安装包" class="headerlink" title="下载官方安装包"></a>下载官方安装包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-5.0.10.tar.gz </span><br></pre></td></tr></table></figure><h3 id="解压安装包"><a href="#解压安装包" class="headerlink" title="解压安装包"></a>解压安装包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf redis-5.0.10.tar.gz </span><br></pre></td></tr></table></figure><p>进入redis目录后可找到redis.conf配置文件</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718171223786.png" alt="redis.conf配置文件"></p><h3 id="移动配置文件"><a href="#移动配置文件" class="headerlink" title="移动配置文件"></a>移动配置文件</h3><p>在宿主机创建一个文件夹用于存放redis.conf，并将redis压缩包中解压出来的redis.conf文件移动到错创建的文件夹中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">mkdir redisconf</span><br><span class="line">mv redis文件夹所在目录 /root/redisconf</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>默认的redis.conf文件中，只能使用localhost的ip地址去访问，需要修改配置文件，将bind改为0.0.0.0，表示允许任意ip访问</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718172514636.png" alt="修改配置文件"></p><h3 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name redis -v /root/redisconf:/usr/<span class="built_in">local</span>/etc/redis -p 6379:6379 -d redis:tag redis-server /usr/<span class="built_in">local</span>/etc/redis/redis.conf </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h1&gt;&lt;p&gt;在安装服务之前，可以去&lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;网站上查看版本信息，以</summary>
      
    
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker的镜像原理</title>
    <link href="https://blog.just-null.cn/posts/docker_images.html"/>
    <id>https://blog.just-null.cn/posts/docker_images.html</id>
    <published>2021-07-18T01:08:40.000Z</published>
    <updated>2021-07-18T01:19:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="镜像是什么？"><a href="#镜像是什么？" class="headerlink" title="镜像是什么？"></a>镜像是什么？</h1><div class="note info no-icon flat"><p>镜像是一种轻量级的，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时所需的库、环境变量和配置文件。</p></div><h1 id="为什么一个镜像会那么大？"><a href="#为什么一个镜像会那么大？" class="headerlink" title="为什么一个镜像会那么大？"></a>为什么一个镜像会那么大？</h1><p>在平时所使用的tomcat中，下载下来的压缩包最多只有几十M，使用docker下载下载的tomcat镜像却有几百M，这是因为一个软件镜像不仅仅是原来软件包,包含软件包所需的操作系统依赖软件自身依赖以及自身软件包组成。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718144856256.png" alt=""></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>UnionFS（联合文件系统）:<ul><li>Union文件系统是一种分层，轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。Union文件系统是Docker镜像的基础。这种文件系统特性:就是一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录 。    </li></ul></li></ul><h1 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h1><div class="note info no-icon flat"><p>docker的镜像实际是由一层一层的文件系统组成</p></div><ul><li><p>bootfs（boot file system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统。在docker镜像的最底层就是bootfs。这一层与Linux/Unix 系统是一样的，包含boot加载器（bootloader）和内核（kernel）。当boot加载完,后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时会卸载bootfs。</p></li><li><p>rootfs（root file system），在bootfs之上，包含的就是典型的linux系统中的/dev，/proc，/bin，/etc等标准的目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu/CentOS等等。</p></li><li><p>我们平时安装进虚拟机的centos都有1到几个GB，为什么docker这里才200MB？对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令，工具，和程序库就可以了，因为底层直接使用Host的Kernal，自己只需要提供rootfs就行了。由此可见不同的linux发行版，他们的bootfs是一致的，rootfs会有差别。因此不同的发行版可以共用bootfs。</p></li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.3/1567585172.jpg" alt=" Docker镜像原理"></p><h1 id="采用这种分层结构的好处"><a href="#采用这种分层结构的好处" class="headerlink" title="采用这种分层结构的好处"></a>采用这种分层结构的好处</h1><div class="note info no-icon flat"><p>最大的一个好处就是资源共享</p></div><p>比如：有多个镜像都是从相同的base镜像构建而来的，那么宿主机只需在磁盘中保存一份base镜像。同时内存中也只需要加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。Docker镜像都是只读的。当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称为容器层，容器层之下都叫镜像层。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;镜像是什么？&quot;&gt;&lt;a href=&quot;#镜像是什么？&quot; class=&quot;headerlink&quot; title=&quot;镜像是什么？&quot;&gt;&lt;/a&gt;镜像是什么？&lt;/h1&gt;&lt;div class=&quot;note info no-icon flat&quot;&gt;&lt;p&gt;镜像是一种轻量级的，可执行的独立软件</summary>
      
    
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="https://blog.just-null.cn/posts/docker_shell.html"/>
    <id>https://blog.just-null.cn/posts/docker_shell.html</id>
    <published>2021-07-18T01:07:40.000Z</published>
    <updated>2021-07-18T01:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="辅助命令"><a href="#辅助命令" class="headerlink" title="辅助命令"></a>辅助命令</h1><p>安装完成辅助命令</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker version--------------------------查看docker的信息</span><br><span class="line">docker info--------------------------查看更详细的信息</span><br><span class="line">docker --help--------------------------帮助命令</span><br></pre></td></tr></table></figure><h1 id="Images-镜像命令"><a href="#Images-镜像命令" class="headerlink" title="Images 镜像命令"></a>Images 镜像命令</h1><ol><li>查看本机中所有镜像</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker images--------------------------列出本地所有镜像</span><br><span class="line"><span class="code">-a列出所有镜像（包含中间映像层）</span></span><br><span class="line"><span class="code"> -q只显示镜像id</span></span><br></pre></td></tr></table></figure><ol><li>搜索镜像</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker search [options] 镜像名-------------------去dockerhub上查询当前镜像</span><br><span class="line"><span class="code">-s 指定值列出收藏数不少于指定值的镜像</span></span><br><span class="line"><span class="code">--no-trunc  显示完整的镜像信息</span></span><br></pre></td></tr></table></figure><ol><li>从仓库下载镜像</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker pull 镜像名[:TAG|@DIGEST]----------------- 下载镜像</span><br></pre></td></tr></table></figure><ol><li>删除镜像</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker rmi 镜像名--------------------------  删除镜像</span><br><span class="line"><span class="code">-f强制删除</span></span><br></pre></td></tr></table></figure><h1 id="Contrainer-容器命令"><a href="#Contrainer-容器命令" class="headerlink" title="Contrainer 容器命令"></a>Contrainer 容器命令</h1><p>1 .运行容器</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker run 镜像名--------------------------镜像名新建并启动容器</span><br><span class="line">--name 别名为容器起一个名字（必须唯一）</span><br><span class="line">-d启动守护式容器（在后台启动容器）</span><br><span class="line">-p 映射端口号：原始端口号 指定端口号启动（宿主机端口与容器中的端口进行映射ip，这样外部才能访问到容器，可以写多个）</span><br><span class="line"></span><br><span class="line">例：docker run -p 8080:8080 镜像名</span><br><span class="line"> docker run -d --name myTomcat -P 镜像名</span><br></pre></td></tr></table></figure><ol><li>查看运行的容器</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker ps--------------------------列出所有正在运行的容器</span><br><span class="line">-a正在运行的和历史运行过的容器</span><br><span class="line">-q静默模式，只显示容器编号</span><br></pre></td></tr></table></figure><ol><li>停止|关闭|重启容器</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker start   容器名字或者容器id  --------------- 开启容器</span><br><span class="line">docker restart 容器名或者容器id    --------------- 重启容器</span><br><span class="line">docker stop  容器名或者容器id     ------------------ 正常停止容器运行</span><br><span class="line">docker kill  容器名或者容器id      ------------------ 立即停止容器运行</span><br></pre></td></tr></table></figure><ol><li>删除容器</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker rm  容器id和容器名   --------------------------删除停止的容器</span><br><span class="line">docker rm -f 容器id和容器名    --------------------------删除正在运行的容器</span><br><span class="line">docker rm -f $(docker ps -aq)--------------------------删除所有容器</span><br></pre></td></tr></table></figure><ol><li>查看容器内进程</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker top 容器id或者容器名 ------------------ 查看容器内的进程</span><br></pre></td></tr></table></figure><ol><li>查看查看容器内部细节</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker inspect 容器id ------------------ 查看容器内部细节</span><br></pre></td></tr></table></figure><ol><li>查看容器的运行日志</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker logs [OPTIONS] 容器id或容器名------------------ 查看容器日志</span><br><span class="line">-t 加入时间戳</span><br><span class="line">-f 跟随最新的日志打印（实时展示日志）</span><br><span class="line">--tail  数字显示最后多少条</span><br><span class="line">docker logs --tail N(5) 容器id或容器名  ------------------ 查看容器日志最后5行</span><br></pre></td></tr></table></figure><ol><li>进入容器内部</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker exec [options] 容器id 容器内命令 ------------------ 进入容器执行命令</span><br><span class="line">-i以交互模式运行容器，通常与-t一起使用</span><br><span class="line">-t分配一个伪终端    shell窗口   bash </span><br><span class="line">docker exec -it 容器id 容器内命令 bash(命令行) ------------------ 进入容器，并与容器内命令终端进行交互</span><br><span class="line">exit 退出容器</span><br></pre></td></tr></table></figure><ol><li>容器和宿主机之间复制文件</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker cp 文件|目录 容器id:容器路径           -----------------   将宿主机复制到容器内部</span><br><span class="line">docker cp 容器id（or容器名）:容器内资源路径 宿主机目录路径  -----------------   将容器内资源拷贝到主机上</span><br></pre></td></tr></table></figure><ol><li>数据卷(volume)实现与宿主机共享目录，对宿主机的改变直接影响容器的改变</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718142551584.png" alt="数据卷(volum)实现与宿主机共享目录"></p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker run -v 宿主机的路径|任意别名:/容器内的路径 镜像名</span><br><span class="line">docker run -d -p 8081:8080 --name tomcat01 -v /root/apps/:/usr/local/tomcat/webapps 镜像名</span><br><span class="line">docker run -d -p 8081:8080 --name tomcat01 -v aa:/usr/local/tomcat/webapps 镜像名</span><br><span class="line">docker run -d -p 8081:8080 --name tomcat01 -v 数据卷名称:/usr/local/tomcat/webapps:ro 镜像名</span><br><span class="line"><span class="code">注意: </span></span><br><span class="line"><span class="code">1. 如果是宿主机路径必须是绝对路径,宿主机目录会覆盖容器内目录内容</span></span><br><span class="line"><span class="code">2. 如果是别名则会在docker运行容器时自动在宿主机中创建一个目录（/var/lib/docker/volumes/别名）,并将容器目录文件复制到宿主机中（如果没有内容，会将容器中的内容复制进去，有内容则容器启动时会从指定的文件中加载数据）  3. ro代表容器内目录权限为只读</span></span><br></pre></td></tr></table></figure><ol><li>打包（备份）镜像</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker save 镜像名 -o  名称.tar</span><br></pre></td></tr></table></figure><ol><li>载入本地镜像</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker load -i 名称.tar</span><br></pre></td></tr></table></figure><ol><li>容器打包成新的镜像</li></ol><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">docker commit -m &quot;描述信息&quot; -a &quot;作者信息&quot;   （容器id或者名称）打包的镜像名称:标签(版本号)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;辅助命令&quot;&gt;&lt;a href=&quot;#辅助命令&quot; class=&quot;headerlink&quot; title=&quot;辅助命令&quot;&gt;&lt;/a&gt;辅助命令&lt;/h1&gt;&lt;p&gt;安装完成辅助命令&lt;/p&gt;
&lt;figure class=&quot;highlight markdown&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td</summary>
      
    
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 安装 Docker</title>
    <link href="https://blog.just-null.cn/posts/centos_docker.html"/>
    <id>https://blog.just-null.cn/posts/centos_docker.html</id>
    <published>2021-07-18T01:06:40.000Z</published>
    <updated>2021-07-18T01:11:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>Docker 支持 64 位版本 CentOS 7/8，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 <code>overlay2</code> 存储层驱动）无法使用，并且部分功能可能不太稳定。</p><h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><h1 id="使用-yum-安装"><a href="#使用-yum-安装" class="headerlink" title="使用 yum 安装"></a>使用 yum 安装</h1><h2 id="安装docker依赖"><a href="#安装docker依赖" class="headerlink" title="安装docker依赖"></a>安装docker依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure><h2 id="设置docker的yum源"><a href="#设置docker的yum源" class="headerlink" title="设置docker的yum源"></a>设置docker的yum源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">$ sudo sed -i <span class="string">&#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27;</span> /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>更新 <code>yum</code> 软件源缓存，并安装 <code>docker-ce</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h1 id="使用脚本自动安装"><a href="#使用脚本自动安装" class="headerlink" title="使用脚本自动安装"></a>使用脚本自动安装</h1><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718115249678.png" alt="使用脚本自动安装"></p><h1 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker <span class="comment">#配置开机自启动</span></span><br><span class="line">$ sudo systemctl start docker  <span class="comment">#启动docker</span></span><br></pre></td></tr></table></figure><h1 id="查看Docker状态"><a href="#查看Docker状态" class="headerlink" title="查看Docker状态"></a>查看Docker状态</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl status docker</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718115605764.png" alt="查看Docker状态"></p><h1 id="关闭docker"><a href="#关闭docker" class="headerlink" title="关闭docker"></a>关闭docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl stop docker</span><br></pre></td></tr></table></figure><h1 id="查看Docker状态-1"><a href="#查看Docker状态-1" class="headerlink" title="查看Docker状态"></a>查看Docker状态</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker info</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718115731801.png" alt="查看Docker状态"></p><h1 id="建立-docker-用户组"><a href="#建立-docker-用户组" class="headerlink" title="建立 docker 用户组"></a>建立 docker 用户组</h1><p>默认情况下，<code>docker</code> 命令会使用<a href="https://en.wikipedia.org/wiki/Unix_domain_socket">Unix socket (opens new window)</a>与 Docker 引擎通讯。而只有 <code>root</code> 用户和 <code>docker</code> 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 <code>root</code> 用户。因此，更好地做法是将需要使用 <code>docker</code> 的用户加入 <code>docker</code> 用户组。</p><h2 id="建立-docker-组："><a href="#建立-docker-组：" class="headerlink" title="建立 docker 组："></a>建立 <code>docker</code> 组：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo groupadd docker</span><br></pre></td></tr></table></figure><h2 id="将当前用户加入-docker-组："><a href="#将当前用户加入-docker-组：" class="headerlink" title="将当前用户加入 docker 组："></a>将当前用户加入 <code>docker</code> 组：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><h2 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启<code>docker</code>服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart docker </span><br></pre></td></tr></table></figure><h1 id="测试-Docker-是否安装正确"><a href="#测试-Docker-是否安装正确" class="headerlink" title="测试 Docker 是否安装正确"></a>测试 Docker 是否安装正确</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run --rm hello-world</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718120421940.png" alt="测试 Docker 是否安装正确"></p><div class="note success simple"><p>若能正常输出以上信息，则说明安装成功。</p></div><h1 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h1><p>如果在使用过程中发现拉取 Docker 镜像十分缓慢，可以配置 Docker <a href="https://vuepress.mirror.docker-practice.com/install/mirror.html">国内镜像加速</a>。</p><h2 id="docker-run命令流程"><a href="#docker-run命令流程" class="headerlink" title="docker run命令流程"></a>docker run命令流程</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20200404120356784.png" alt="docker 运行流程"></p><h2 id="配置阿里云镜像加速"><a href="#配置阿里云镜像加速" class="headerlink" title="配置阿里云镜像加速"></a>配置阿里云镜像加速</h2><p>注册阿里云账号并登录</p><p>官网：<a href="https://www.aliyun.com/">https://www.aliyun.com/</a></p><p>登录之后进入控制台</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718122445017.png" alt="进入控制台"></p><p>搜索<code>容器镜像服务</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718122636860.png" alt="容器镜像服务"></p><p>找到镜像加速器，并按照对应的系统查找对应的命令</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718123025032.png" alt="镜像加速器"></p><h3 id="CentSO7"><a href="#CentSO7" class="headerlink" title="CentSO7"></a>CentSO7</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://自己镜像加速器了吗显示的.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p><code>验证docker的镜像加速是否生效</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718123254446.png" alt="验证docker的镜像加速是否生效"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;h2 id=&quot;系统要求&quot;&gt;&lt;a href=&quot;#系统要求&quot; class=&quot;headerlink&quot; title=&quot;系统要求&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/tags/Docker/"/>
    
    <category term="CentOS" scheme="https://blog.just-null.cn/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Docker引言</title>
    <link href="https://blog.just-null.cn/posts/docker_start.html"/>
    <id>https://blog.just-null.cn/posts/docker_start.html</id>
    <published>2021-07-18T01:05:40.000Z</published>
    <updated>2021-07-18T01:10:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Docker"><a href="#什么是-Docker" class="headerlink" title="什么是 Docker"></a>什么是 Docker</h1><h2 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h2><div class="note info no-icon flat"><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.1/image-20201220214210994.png" alt=""></p><ul><li>We have a complete container solution for you - no matter who you are and where you are on your containerization journey.</li><li>翻译: 我们为你提供了一个完整的容器解决方案,不管你是谁,不管你在哪,你都可以开始容器的的旅程。</li><li>官方定义: docker是一个容器技术。</li><li>官方文档地址:<a href="https://www.docker.com/get-started">https://www.docker.com/get-started</a></li><li>中文参考手册:<a href="https://docker_practice.gitee.io/zh-cn/">https://docker_practice.gitee.io/zh-cn/</a></li></ul></div><h1 id="Docker的起源"><a href="#Docker的起源" class="headerlink" title="Docker的起源"></a>Docker的起源</h1><div class="note info no-icon flat"><p>Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟（OCI）。</p><p>Docker 自开源后受到广泛的关注和讨论，至今其 GitHub 项目 已经超过 5 万 7 千个星标和一万多个 fork。甚至由于 Docker 项目的火爆，在 2013 年底，dotCloud 公司决定改名为 Docker。Docker 最初是在 Ubuntu 12.04 上开发实现的；Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持；Google 也在其 PaaS 产品中广泛应用 Docker。</p><p>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</p></div><h1 id="为什么使用Docker"><a href="#为什么使用Docker" class="headerlink" title="为什么使用Docker"></a>为什么使用Docker</h1><ul><li><p><code>在开发的时候，在本机测试环境可以跑，生产环境跑不起来</code></p><p>这里我们拿java Web应用程序举例，我们一个java Web应用程序涉及很多东西，比如jdk、tomcat、mysql等软件环境。当这些其中某一项版本不一致的时候，可能就会导致应用程序跑不起来这种情况。Docker则将程序以及使用软件环境直接打包在一起，无论在那个机器上保证了环境一致。</p><p><strong>优势1:  一致的运行环境,更轻松的迁移</strong></p></li></ul><ul><li><p><code>服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了</code></p><p>这种也是一种比较常见的情况，如果你的程序重要性不是特别高的话，公司基本上不可能让你的程序独享一台服务器的，这时候你的服务器就会跟公司其他人的程序共享一台服务器，所以不可避免地就会受到其他程序的干扰，导致自己的程序出现问题。Docker就很好解决了环境隔离的问题，别人程序不会影响到自己的程序。</p><p><strong>优势2：对进程进行封装隔离,容器与容器之间互不影响,更高效的利用系统资源</strong></p></li></ul><ul><li><p><code>公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器</code></p><p>在没有Docker的情况下，要在几天内部署几十台服务器，这对运维来说是一件非常折磨人的事，而且每台服务器的环境还不一定一样，就会出现各种问题，最后部署地头皮发麻。用Docker的话，我只需要将程序打包到镜像，你要多少台服务，我就给力跑多少容器，极大地提高了部署效率。</p><p><strong>优势3: 通过镜像复制N多个环境一致容器</strong></p></li></ul><h1 id="Docker和虚拟机区别"><a href="#Docker和虚拟机区别" class="headerlink" title="Docker和虚拟机区别"></a>Docker和虚拟机区别</h1><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20201220222456675.png" alt=""></p><p><code>比较上面两张图，我们发现虚拟机是携带操作系统，本身很小的应用程序却因为携带了操作系统而变得非常大，很笨重</code>。Docker是不携带操作系统的，所以Docker的应用就非常的轻巧。另外在调用宿主机的CPU、磁盘等等这些资源的时候，拿内存举例，虚拟机是利用Hypervisor去虚拟化内存，整个调用过程是虚拟内存-&gt;虚拟物理内存-&gt;真正物理内存，但是Docker是利用Docker Engine去调用宿主的的资源，这时候过程是虚拟内存-&gt;真正物理内存。</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210718141416684.png" alt="Docker和虚拟机区别"></p><div class="table-container"><table><thead><tr><th></th><th>传统虚拟机</th><th>Docker容器</th></tr></thead><tbody><tr><td>磁盘占用</td><td>几个GB到几十个GB左右</td><td>几十MB到几百MB左右</td></tr><tr><td>CPU内存占用</td><td>虚拟操作系统非常占用CPU和内存</td><td>Docker引擎占用极低</td></tr><tr><td>启动速度</td><td>（从开机到运行项目）几分钟</td><td>（从开启容器到运行项目）几秒</td></tr><tr><td>安装管理</td><td>需要专门的运维技术</td><td>安装、管理方便</td></tr><tr><td>应用部署</td><td>每次部署都费时费力</td><td>从第二次部署开始轻松简捷</td></tr><tr><td>耦合性</td><td>多个应用服务安装到一起，容易互相影响</td><td>每个应用服务一个容器，达成隔离</td></tr><tr><td>系统依赖</td><td>无</td><td>需求相同或相似的内核，目前推荐是Linux</td></tr></tbody></table></div><h1 id="Docker-的核心架构"><a href="#Docker-的核心架构" class="headerlink" title="Docker 的核心架构"></a>Docker 的核心架构</h1><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20200404111908085-0291323.png" alt="Docker 的核心架构"></p><div class="note success simple"><ul><li><code>镜像:</code> 一个镜像代表一个应用环境,他是一个只读的文件,如 mysql镜像,tomcat镜像,nginx镜像等</li><li><code>容器:</code> 镜像每次运行之后就是产生一个容器,就是正在运行的镜像,特点就是可读可写</li><li><code>仓库:</code>用来存放镜像的位置,类似于maven仓库,也是镜像下载和上传的位置</li><li><code>dockerFile:</code>docker生成镜像配置文件,用来书写自定义镜像的一些配置</li><li><code>tar:</code>一个对镜像打包的文件,日后可以还原成镜像</li></ul></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是-Docker&quot;&gt;&lt;a href=&quot;#什么是-Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是 Docker&quot;&gt;&lt;/a&gt;什么是 Docker&lt;/h1&gt;&lt;h2 id=&quot;官方定义&quot;&gt;&lt;a href=&quot;#官方定义&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.just-null.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS在web项目中的应用</title>
    <link href="https://blog.just-null.cn/posts/fastdfs_web.html"/>
    <id>https://blog.just-null.cn/posts/fastdfs_web.html</id>
    <published>2021-07-17T01:20:40.000Z</published>
    <updated>2021-07-17T01:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="创建SpringBoot项目"><a href="#创建SpringBoot项目" class="headerlink" title="创建SpringBoot项目"></a>创建SpringBoot项目</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719232527288.png" alt="创建SpringBoot项目"></p><h2 id="pom文件编写"><a href="#pom文件编写" class="headerlink" title="pom文件编写"></a>pom文件编写</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.zcx7878<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--配置文件的位置--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>GeneratorMapper.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="properties文件"><a href="#properties文件" class="headerlink" title="properties文件"></a>properties文件</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://121.4.89.208:3306/file?characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">LDL@srb0617</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟本地上传</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="meta">mybatis.type-aliases-package</span>=<span class="string">com.just.fastdfs.model</span></span><br></pre></td></tr></table></figure><h2 id="创建FastDfs的配置文件"><a href="#创建FastDfs的配置文件" class="headerlink" title="创建FastDfs的配置文件"></a>创建FastDfs的配置文件</h2><p>创建fastdfs.conf文件并放到resource目录下</p><p>文件内容</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tracker_server&#x3D;fastdfs所在容器ip:22122</span><br></pre></td></tr></table></figure><h1 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h1><h2 id="使用数据库工具导入sql脚本"><a href="#使用数据库工具导入sql脚本" class="headerlink" title="使用数据库工具导入sql脚本"></a>使用数据库工具导入sql脚本</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for sys_file</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `sys_file`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `sys_file` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `filegroup` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `filepath` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">6</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><h2 id="FastDfsUtil工具类编写"><a href="#FastDfsUtil工具类编写" class="headerlink" title="FastDfsUtil工具类编写"></a>FastDfsUtil工具类编写</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.fastdfs.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.csource.common.MyException;</span><br><span class="line"><span class="keyword">import</span> org.csource.fastdfs.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String [] upload(<span class="keyword">byte</span>[] buffFile,String fileExtName) &#123;</span><br><span class="line">        TrackerServer ts=<span class="keyword">null</span>;</span><br><span class="line">        StorageServer ss=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取FastDFS的配置文件用于将所有的tracker的地址读取到内存中</span></span><br><span class="line">            ClientGlobal.init(<span class="string">&quot;fastdfs.conf&quot;</span>);</span><br><span class="line">            TrackerClient tc=<span class="keyword">new</span> TrackerClient();</span><br><span class="line">            ts=tc.getConnection();</span><br><span class="line">            ss=tc.getStoreStorage(ts);</span><br><span class="line">            <span class="comment">//定义Storage的客户端对象，需要使用这个对象来完成具体的文件上传 下载和删除操作</span></span><br><span class="line">            StorageClient sc=<span class="keyword">new</span> StorageClient(ts,ss);</span><br><span class="line"></span><br><span class="line">            String[] result= sc.upload_file(buffFile,fileExtName,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ss!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ts!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ts.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span> [] download(String groupName,String remoteFilename) &#123;</span><br><span class="line">        TrackerServer ts=<span class="keyword">null</span>;</span><br><span class="line">        StorageServer ss=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取FastDFS的配置文件用于将所有的tracker的地址读取到内存中</span></span><br><span class="line">            ClientGlobal.init(<span class="string">&quot;fastdfs.conf&quot;</span>);</span><br><span class="line">            TrackerClient tc=<span class="keyword">new</span> TrackerClient();</span><br><span class="line">            ts=tc.getConnection();</span><br><span class="line">            ss=tc.getStoreStorage(ts);</span><br><span class="line">            <span class="comment">//定义Storage的客户端对象，需要使用这个对象来完成具体的文件上传 下载和删除操作</span></span><br><span class="line">            StorageClient sc=<span class="keyword">new</span> StorageClient(ts,ss);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 文件下载</span></span><br><span class="line"><span class="comment">             * 参数1 需要下载的文件的组名</span></span><br><span class="line"><span class="comment">             * 参数2 需要下载文件的远程文件名</span></span><br><span class="line"><span class="comment">             * 参数3 需要保存的本地文件名</span></span><br><span class="line"><span class="comment">             * 返回一个int类型的数据 返回0 表示文件下载成功其它值表示文件在下载失败</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span> [] buffFile=sc.download_file(groupName,remoteFilename);</span><br><span class="line">            <span class="keyword">return</span> buffFile;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ss!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ts!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ts.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String groupName,String remoteFilename)</span> </span>&#123;</span><br><span class="line">        TrackerServer ts=<span class="keyword">null</span>;</span><br><span class="line">        StorageServer ss=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//读取FastDFS的配置文件用于将所有的tracker的地址读取到内存中</span></span><br><span class="line">            ClientGlobal.init(<span class="string">&quot;fastdfs.conf&quot;</span>);</span><br><span class="line">            TrackerClient tc=<span class="keyword">new</span> TrackerClient();</span><br><span class="line">            ts=tc.getConnection();</span><br><span class="line">            ss=tc.getStoreStorage(ts);</span><br><span class="line">            <span class="comment">//定义Storage的客户端对象，需要使用这个对象来完成具体的文件上传 下载和删除操作</span></span><br><span class="line">            StorageClient sc=<span class="keyword">new</span> StorageClient(ts,ss);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 文件删除</span></span><br><span class="line"><span class="comment">             * 参数1 需要删除的文件的组名</span></span><br><span class="line"><span class="comment">             * 参数2 需要删除文件的远程文件名</span></span><br><span class="line"><span class="comment">             * 返回一个int类型的数据 返回0 表示文件删除成功其它值表示文件在删除失败</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">int</span> result=sc.delete_file(groupName,remoteFilename);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ss!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ts!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ts.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mapper层"><a href="#mapper层" class="headerlink" title="mapper层"></a>mapper层</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.fastdfs.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.just.fastdfs.model.FileInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertFile</span><span class="params">(<span class="meta">@Param(&quot;group&quot;)</span> String group, <span class="meta">@Param(&quot;filepath&quot;)</span> String filepath)</span></span>;</span><br><span class="line">    <span class="function">List&lt;FileInfo&gt; <span class="title">selectFile</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">FileInfo <span class="title">selectByid</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByid</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mapper文件"><a href="#mapper文件" class="headerlink" title="mapper文件"></a>mapper文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.just.fastdfs.mapper.FileMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertFile&quot;</span>&gt;</span></span><br><span class="line">        insert into sys_file(filegroup, filepath)</span><br><span class="line">        VALUES (#&#123;group&#125;, #&#123;filepath&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectFile&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.just.fastdfs.model.FileInfo&quot;</span>&gt;</span></span><br><span class="line">        select * from sys_file;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.just.fastdfs.model.FileInfo&quot;</span>&gt;</span></span><br><span class="line">        select * from sys_file where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByid&quot;</span>&gt;</span></span><br><span class="line">        delete from sys_file where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.fastdfs.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.just.fastdfs.model.FileInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertFile</span><span class="params">(String group, String filepath)</span></span>;</span><br><span class="line">    <span class="function">List&lt;FileInfo&gt; <span class="title">selectFile</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">FileInfo <span class="title">selectByid</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">    <span class="function">Boolean <span class="title">deleteByid</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.fastdfs.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.just.fastdfs.mapper.FileMapper;</span><br><span class="line"><span class="keyword">import</span> com.just.fastdfs.model.FileInfo;</span><br><span class="line"><span class="keyword">import</span> com.just.fastdfs.service.FileService;</span><br><span class="line"><span class="keyword">import</span> com.just.fastdfs.utils.FastDFSUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServiceImpl</span> <span class="keyword">implements</span> <span class="title">FileService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileMapper fileMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> group</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filepath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertFile</span><span class="params">(String group, String filepath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileMapper.insertFile(group,filepath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所哟数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;FileInfo&gt; <span class="title">selectFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileMapper.selectFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过id查询数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileInfo <span class="title">selectByid</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileMapper.selectByid(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过id删除数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">deleteByid</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        FileInfo fileInfo = fileMapper.selectByid(id);</span><br><span class="line">        <span class="keyword">int</span> i = FastDFSUtil.delete(fileInfo.getFilegroup(),fileInfo.getFilepath());</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//如果文件删除成功。则删除数据库中的数据</span></span><br><span class="line">            <span class="keyword">int</span> j = fileMapper.deleteByid(id);</span><br><span class="line">            <span class="keyword">return</span> j &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="controler"><a href="#controler" class="headerlink" title="controler"></a>controler</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.fastdfs.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.just.fastdfs.model.FileInfo;</span><br><span class="line"><span class="keyword">import</span> com.just.fastdfs.service.FileService;</span><br><span class="line"><span class="keyword">import</span> com.just.fastdfs.utils.FastDFSUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileService fileService;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">creditors</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        <span class="comment">//查询图片</span></span><br><span class="line">        List&lt;FileInfo&gt; file = fileService.selectFile();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;file&quot;</span>, file);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     * 参数 MultipartFile 为Spring提供的一个类，专门用于封装请求中的文件数据</span></span><br><span class="line"><span class="comment">     * 属性名必须与表单中文件域的名字完全相同否则无法获取文件数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(MultipartFile myFile, Model model)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取文件对应的字节数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffFile=myFile.getBytes();</span><br><span class="line">        <span class="comment">//获取文件名</span></span><br><span class="line">        String fileName=myFile.getOriginalFilename();</span><br><span class="line">        <span class="comment">//获取文件扩展名</span></span><br><span class="line">        String fileExtName=fileName.substring(fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//根据类返回一个String数组，其中，下标为0的值为文件所在的组，下标为1的值代表文件的路径</span></span><br><span class="line">        String[] result=FastDFSUtil.upload(buffFile,fileExtName);</span><br><span class="line">        <span class="comment">//将文件所在的组和文件路径存入数据库中</span></span><br><span class="line">        <span class="keyword">int</span> i = fileService.insertFile(result[<span class="number">0</span>],result[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成文件下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  需要下载的文件主键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ResponseEntity 表示一个响应的实体，这个类是Spring提供的一个类，这个类是Spring响应数据时的一个对象</span></span><br><span class="line"><span class="comment">     *         这个对象用包含则响应时的编码例如404 200 等等，以及响应的头文件信息，以及响应时的具体数据</span></span><br><span class="line"><span class="comment">     *         这个数据可以是一段html代码，也可以是一段js，也可以是一段普通字符串，也可以是一个文件的流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/download/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; download(<span class="meta">@PathVariable</span> Integer id)&#123;</span><br><span class="line">        FileInfo fileInfo=fileService.selectByid(id);</span><br><span class="line">        <span class="keyword">byte</span> [] buffFile=FastDFSUtil.download(fileInfo.getFilegroup(), fileInfo.getFilepath());</span><br><span class="line">        HttpHeaders headers=<span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);<span class="comment">//设置响应类型为文件类型</span></span><br><span class="line">        headers.setContentLength(buffFile.length);<span class="comment">//设置响应时的文件大小用于自动提供下载进度</span></span><br><span class="line">        <span class="comment">//设置下载时的默认文件名</span></span><br><span class="line">        headers.setContentDispositionFormData(<span class="string">&quot;attachment&quot;</span>,<span class="string">&quot;图片.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 创建响应实体对象，Spring会将这个对象返回给浏览器，作为响应数据</span></span><br><span class="line"><span class="comment">         * 参数 1 为响应时的具体数据</span></span><br><span class="line"><span class="comment">         * 参数 2 为响应时的头文件信息</span></span><br><span class="line"><span class="comment">         * 参数 3 为响应时的状态码</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; responseEntity=<span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(buffFile,headers, HttpStatus.OK);</span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>&#123;</span><br><span class="line">        Boolean flag = fileService.deleteByid(id);</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;delerror&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.just.fastdfs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前端页面编写"><a href="#前端页面编写" class="headerlink" title="前端页面编写"></a>前端页面编写</h1><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.main</span>&#123;</span></span><br><span class="line">            width: 600px;</span><br><span class="line">            margin: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-striped&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;file:$&#123;file&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">th:src</span>=<span class="string">&quot;@&#123;&#x27;http://121.4.89.208/&#x27; + $&#123;file.filegroup&#125; + &#x27;/&#x27; + $&#123;file.filepath&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;img-thumbnail&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px;height: 200px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">style</span>=<span class="string">&quot;display:table-cell; vertical-align:middle&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;|/download/$&#123;file.id&#125;|&#125;&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;|/delete/$&#123;file.id&#125;|&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/upload&#125;&quot;</span> <span class="attr">target</span>=<span class="string">&quot;success&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">            文件:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;myFile&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传文件&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="errer-html"><a href="#errer-html" class="headerlink" title="errer.html"></a>errer.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>上传错误<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="delerror-html"><a href="#delerror-html" class="headerlink" title="delerror.html"></a>delerror.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>删除失败<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719233502186.png" alt="启动项目"></p><h2 id="浏览器测试"><a href="#浏览器测试" class="headerlink" title="浏览器测试"></a>浏览器测试</h2><p>浏览器访问：<a href="http://localhost:8081/">http://localhost:8081/</a></p><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719233601046.png" alt="上传图片"></p><h4 id="上传成功"><a href="#上传成功" class="headerlink" title="上传成功"></a>上传成功</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719233631452.png" alt="上传成功"></p><h3 id="测试删除"><a href="#测试删除" class="headerlink" title="测试删除"></a>测试删除</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719233731575.png" alt="测试删除"></p><h4 id="删除成功"><a href="#删除成功" class="headerlink" title="删除成功"></a>删除成功</h4><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719233753150.png" alt="删除成功"></p><h3 id="测试下载"><a href="#测试下载" class="headerlink" title="测试下载"></a>测试下载</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.2/image-20210719233814976.png" alt="测试下载"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;创建项目&quot;&gt;&lt;a href=&quot;#创建项目&quot; class=&quot;headerlink&quot; title=&quot;创建项目&quot;&gt;&lt;/a&gt;创建项目&lt;/h1&gt;&lt;h2 id=&quot;创建SpringBoot项目&quot;&gt;&lt;a href=&quot;#创建SpringBoot项目&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="FastDFS" scheme="https://blog.just-null.cn/categories/FastDFS/"/>
    
    
    <category term="FastDFS" scheme="https://blog.just-null.cn/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>分布式文件系统FastDFS的HTTP访问</title>
    <link href="https://blog.just-null.cn/posts/fastdfs_http.html"/>
    <id>https://blog.just-null.cn/posts/fastdfs_http.html</id>
    <published>2021-07-17T01:19:40.000Z</published>
    <updated>2021-07-17T01:28:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><div class="note info no-icon flat"><p>在文件上传的时候，上传成功的信息中有提示我们可以通过某个路径去访问上传的文件，此时可以安装FastDFS提供了一个Nginx扩展模块，利用该模块，可以通过Nginx访问已经上传到FastDFS上的文件</p></div><h1 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h1><p>先安装基础的Nginx，安装方法请见<a href="https://blog.just-null.cn/posts/nginx_install.html">Nginx安装</a></p><h1 id="安装Fastdfs的Nginx扩展"><a href="#安装Fastdfs的Nginx扩展" class="headerlink" title="安装Fastdfs的Nginx扩展"></a>安装Fastdfs的Nginx扩展</h1><p>将Fastdfs的Nginx扩展模块源代码上传到Linux上并解压</p><p>下载地址：<a href="https://github.com/happyfish100/fastdfs-nginx-module/releases">https://github.com/happyfish100/fastdfs-nginx-module/releases</a></p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>切换至Nginx解压出来的目录，执行配置操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --add-module=/usr/<span class="built_in">local</span>/fastdfs-nginx-module-1.22/src</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.1/image-20210716144128691.png" alt="配置"></p><p>之后执行<code>make</code>和<code>make install</code>命令</p><p>执行完命令之后到<code>/usr/local/nginx/sbin</code>目录下，查看扩展模块是否已经安装成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./nginx -V</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.1/image-20210716144414733.png" alt="查看扩展模块"></p><h2 id="FastDFS的Nginx访问配置"><a href="#FastDFS的Nginx访问配置" class="headerlink" title="FastDFS的Nginx访问配置"></a>FastDFS的Nginx访问配置</h2><p>将<code>fastdfs-nginx-module-master/src</code>目录下的<code>mod_fastdfs.conf</code>文件拷贝到<code>/etc/fdfs/</code>目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp mod_fastdfs.conf /etc/fdfs/</span><br></pre></td></tr></table></figure><p>修改mod_fastdfs.conf配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim mod_fastdfs.conf</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.1/image-20210716145419174.png" alt="mod_fastdfs.conf"></p><p>配置置Nginx的配置文件</p><p>去到nginx的conf目录下，配置nginx.conf文件</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ &#x2F;group[1-9]&#x2F;M0[0-9] &#123;</span><br><span class="line">     ngx_fastdfs_module;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.1/image-20210716150137227.png" alt="配置nginx.conf"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.1/image-20210716141248375.png" alt="执行上传命令"></p><div class="note success simple"><p>ngx_fastdfs_module;  #这个指令不是Nginx本身提供的，是扩展模块提供的，根据这个指令找到FastDFS提供的Nginx模块配置文件，然后找到Tracker，最终找到Stroager</p></div><h2 id="FastDFS的Nginx访问启动与测试"><a href="#FastDFS的Nginx访问启动与测试" class="headerlink" title="FastDFS的Nginx访问启动与测试"></a>FastDFS的Nginx访问启动与测试</h2><h3 id="启动带有Fastdfs模块的Nginx"><a href="#启动带有Fastdfs模块的Nginx" class="headerlink" title="启动带有Fastdfs模块的Nginx"></a>启动带有Fastdfs模块的Nginx</h3><p>进入nginx目录下的sbin 目录，执行<code>./nginx</code>启动</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.1/image-20210716150445428.png" alt="启动nginx"></p><h3 id="重启或启动FastDFS服务进程"><a href="#重启或启动FastDFS服务进程" class="headerlink" title="重启或启动FastDFS服务进程"></a>重启或启动FastDFS服务进程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class="line">fdfs_storaged /etc/fdfs/storage.conf restart</span><br></pre></td></tr></table></figure><h3 id="上传一个文件进行测试验证"><a href="#上传一个文件进行测试验证" class="headerlink" title="上传一个文件进行测试验证"></a>上传一个文件进行测试验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdfs_test /etc/fdfs/client.conf upload 文件名</span><br></pre></td></tr></table></figure><h3 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Just-null/blog_imgs@v3.1/image-20210716151419573.png" alt="浏览器访问"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;div class=&quot;note info no-icon flat&quot;&gt;&lt;p&gt;在文件上传的时候，上传成功的信息中有提示我们可以通过某个路径去访问上</summary>
      
    
    
    
    <category term="FastDFS" scheme="https://blog.just-null.cn/categories/FastDFS/"/>
    
    
    <category term="FastDFS" scheme="https://blog.just-null.cn/tags/FastDFS/"/>
    
  </entry>
  
</feed>
